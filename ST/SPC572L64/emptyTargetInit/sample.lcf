
MEMORY
{
    resetvector:        org = 0x01000000,   len = 0x00000020
    init:               org = 0x01000020,   len = 0x00000FE0
    exception_handlers: org = 0x01001000,   len = 0x00001000
    exception_vectr   : org = 0x01002000,   len = 0x00003000
    internal_flash:     org = 0x01005000,   len = 0x00012000
    load_flash:         org = 0x01017000,   len = 0x000D0000
    internal_ram:       org = 0x40000000,   len = 0x00002000
    stack :             org = 0x40002000,   len = 0x1000 /* Start location for Stack */
    heap  :             org = 0x40003000,   len = 0x1000 /* Heap start location */
}

__RAM_START_ADDR = ADDR(internal_ram);
__RAM_END_ADDR = ADDR(stack) + SIZEOF(stack);
__RAM_SIZE = __RAM_END_ADDR - __RAM_START_ADDR;

FORCEACTIVE { "RCHW" "CPU2_resetvector","CPU0_resetvector","CPU1_resetvector" }
		
SECTIONS
{
    .__bam_bootarea     LOAD (0x01000000)               : {} > resetvector

    .init               LOAD (0x01000020)               : {} > init
    .init_vle (VLECODE) LOAD (ADDR(.init)+SIZEOF(.init)): {
        *(.init)
        *(.init_vle)
     } > init

    .__exception_handlers LOAD (0x01001000)             : {} > exception_handlers 
    GROUP  : {
        .isrvectbl         (VLECODE) ALIGN(0x1000) LOAD (0x01002000)   : {}  
        .xptn_vectors      (VLECODE) ALIGN(0x1000) LOAD (0x01002000+SIZEOF(.isrvectbl))   : {}     
    } > exception_vectr

    GROUP  : {
        .text LOAD (0x01005000) : {}
        .text_vle (VLECODE) : {
            *(.text)
            *(.text_vle)
        }
        
        .ctors  LOAD(ADDR(.text_vle)+SIZEOF(.text_vle)) : {}
        .dtors  LOAD(ADDR(.ctors)+SIZEOF(.ctors))       : {}
        extab   LOAD(ADDR(.dtors)+SIZEOF(.dtors))       : {}
        extabindex LOAD(ADDR(extab)+SIZEOF(extab))      : {}
        .rodata (CONST) LOAD(ADDR(extabindex)+SIZEOF(extabindex)) : {
            *(.rdata)
            *(.rodata)
        }        
    } > internal_flash
    
    .sdata2          LOAD(ADDR(.rodata)+SIZEOF(.rodata))      : {} > internal_flash
    .sbss2           LOAD(ADDR(.sdata2)+SIZEOF(.sdata2))      : {} > internal_flash
    
    
    .load_data : {  
       __START_DATA = .;
       . = . + SIZEOF(.data);
       __END_DATA = .;
       . = . + SIZEOF(.bss);
       __START_SDATA = .;
       . = . + SIZEOF(.sdata);
       __END_SDATA = .;                        
       . = . + SIZEOF(.sbss);
                          
    } > load_flash    
    
    GROUP : {
       .__uninitialized_intc_handlertable ALIGN(0x10) : {}
       .data   LOAD (0x01017000)                                            : {}
       .sdata    LOAD (0x01017000+SIZEOF(.data))                              : {}
       .sbss  LOAD (0x01017000+SIZEOF(.data)+SIZEOF(.sdata))                 : {}
       .bss   LOAD (0x01017000+SIZEOF(.data)+SIZEOF(.sbss)+SIZEOF(.sdata))  : {}
    } > internal_ram
}

/* Metrowerks CodeWarrior compiler address designations */

_stack_addr = ADDR(stack)+SIZEOF(stack);
_stack_end  = ADDR(stack);
_heap_addr  = ADDR(heap);
_heap_end   = ADDR(heap)+SIZEOF(heap);

__ROM_DATA_ADDR     = __START_DATA; 
__ROM_DATA_SIZE     = SIZEOF(.data);
__RAM_DATA_ADDR     = ADDR(.data);

__ROM_SDATA_SIZE    = SIZEOF(.sdata);
__ROM_SDATA_ADDR    = __START_SDATA+SIZEOF(.data);
__RAM_SDATA_ADDR    = ADDR(.sdata);
 
__ROM_SDATA2_ADDR   = __ROM_SDATA_ADDR+SIZEOF(.sdata);
__ROM_SDATA2_SIZE   = SIZEOF(.sdata2);

__RAM_BSS_SIZE      = SIZEOF(.bss);
__RAM_BSS_ADDR      = ADDR(.bss);         

__SRAM_BASE_ADDR    = ADDR(internal_ram);
__SRAM_SIZE         = 0x000B000;

/* Interrupt Handler Parameters */
__IVPR              = ADDR(exception_vectr);

__SP_INIT           = _stack_addr;
/* Exceptions Handlers Location (used in z650Exceptions.c for IVPR initialization) */

/* EXCEPTION_HANDLERS = ADDR(exception_handlers); */


