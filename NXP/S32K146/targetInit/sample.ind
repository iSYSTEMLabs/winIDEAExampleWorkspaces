INPUT(& &)
ENTRY(ResetISR)

/***************************************************************************************
*  The SRAM is split into two logical arrays that are 32-bits wide.
*  - SRAM_L — Accessible by the code bus of the Cortex-M4 core and by the backdoor
*  port.
*  - SRAM_U — Accessible by the system bus of the Cortex-M4 core and by the
*  backdoor port.
*  The backdoor port makes the SRAM accessible to the non-core bus masters (such as
*  DMA).
*  
*  - SRAM_L: 0x1FFF_0000 – 0x1FFF_FFFF
*  - SRAM_U: 0x2000_0000 – 0x2001_0000 
***************************************************************************************/

MEMORY
{
    /* avoid 0x400 area since there are some flash protect related locations */
    VECT (rwx) : ORIGIN = 0x00000000, LENGTH = 0x400    
    ROM (rwx)  : ORIGIN = 0x00001000, LENGTH = 508K    
    RAM (rwx)  : ORIGIN = 0x1FFF8000, LENGTH = 60K
    FOPT (rwx) : ORIGIN = 0x00000400, LENGTH = 0x10
}

_estack = (ORIGIN(RAM) + LENGTH(RAM) - 4) & 0xFFFFFFFC;
_stack_top = _estack;
SECTIONS
{
       
    .vect :
    {
        KEEP(*(.isr_vector))
    } > VECT
    

    
    .text :
    {
        . = ALIGN(4);
        *(.text*)
        *(.glue_7t) *(.glue_7)
        *(.rodata*)
        *(.eh*)
        . = ALIGN(4);
        _text_end = .;
    } > ROM

    .data : AT (ADDR(.text) + SIZEOF(.text))
    {
        . = ALIGN(4);
        _data = .;
        *(vtable)
        *(.data*)
        . = ALIGN(4);
        _data_end = .;
    } > RAM

    .bss :
    {
        . = ALIGN(4);
        _bss = .;
        *(.bss*)
        *(COMMON)
        . = ALIGN(4);
        _bss_end = .;
    } > RAM
}


