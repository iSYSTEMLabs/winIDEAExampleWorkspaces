
RCW_FLASH_ADDR          = 0x00F98000;
RCW_FLASH_SIZE          = 0x01000;

MEMORY
{
    rcw_flash:          org = 0x00F98000,   len = 0x00001000
    init_flash:         org = 0x01002000,   len = 0x00002000
    xcpt_vect:          org = 0x01004000,   len = 0x00002000
    internal_flash:     org = 0x01006000,   len = 0x00020000
    load_flash:         org = 0x01100000,   len = 0x0000f000 /* Init Ram */    
    internal_ram:       org = 0x40000000,   len = 0x0000b000
    stack :             org = 0x4000B000,   len = 0x00002000 /* Start location for Stack */
    heap  :             org = 0x5020D000,   len = 0x00002000 /* Heap start location */
}

__RAM_START_ADDR = ADDR(internal_ram);
__RAM_END_ADDR = ADDR(stack) + SIZEOF(stack);
__RAM_SIZE = __RAM_END_ADDR - __RAM_START_ADDR;

FORCEACTIVE { "RCW", "CPU2_resetvector","CFG_bits0","CFG_bits1" }
		
SECTIONS
{
    .__bam_bootarea                                                               : {} > rcw_flash   
    .init                                                                         : {} > rcw_flash    
    .init_vle (VLECODE)                                                           : {
       *(.init)
       *(.init_vle)
    } > rcw_flash 
       
    GROUP  : { 
       .isrvectbl(VLECODE)     ALIGN(0x1000) LOAD(0x01004000)                      : {}         /* ISR Vector Table - must be 4K aligned */
       .xptn_vectors (VLECODE) ALIGN(0x1000) LOAD(0x01004000+SIZEOF(.isrvectbl))   : {}         /* Exception Vector Table (IVPR) - align 4K boundary */
    } > xcpt_vect

    GROUP   : {
       .text_vle (VLECODE)  LOAD(0x01006000)                                     : {
            *(.text)
            *(.text_vle)
       }
    } >  internal_flash

    GROUP   : {
       .rodata (CONST)   LOAD(ADDR(.text_vle)+SIZEOF(.text)+SIZEOF(.text_vle))   : {
            *(.rdata)
            *(.rodata)                                                
       }
       .ctors            LOAD(ADDR(.rodata)+SIZEOF(.rodata))                     : {}
       .dtors            LOAD(ADDR(.ctors)+SIZEOF(.ctors))                       : {}
       extab             LOAD(ADDR(.dtors)+SIZEOF(.dtors))                       : {}
       extabindex        LOAD(ADDR(extab)+SIZEOF(extab))                         : {}
        
    } >  internal_flash
        
    .text                 LOAD(ADDR(extabindex)+SIZEOF(extabindex))               : {} >  internal_flash
      
    .sdata2               LOAD(ADDR(.text)+SIZEOF(.text))                         : {} >  internal_flash     
               
    .load_data : {  
       __START_DATA = .;
       . = . + SIZEOF(.data);
       __END_DATA = .;
       __START_SDATA = .;
       . = . + SIZEOF(.sdata);
       __END_SDATA = .;            
       __START_SDATA2 = .;            
       . = . + SIZEOF(.sdata2);
       __END_SDATA2 = .;
                          
    } > load_flash 
        
/* Locate all initialized data physically to ROM after the text section */

    GROUP : {
       .data    LOAD (0x01100000)                               : {}
       .sdata   LOAD (0x01100000+SIZEOF(.data))                 : {}
       .sbss                                                    : {}
       .bss                                                     : {}
    } > internal_ram           
}
                                                             
/* Metrowerks CodeWarrior compiler address designations */

_stack_addr = ADDR(stack)+SIZEOF(stack);
_stack_end  = ADDR(stack);
_heap_addr  = ADDR(heap);
_heap_end   = ADDR(heap)+SIZEOF(heap);

__ROM_DATA_ADDR     = __START_DATA; 
__ROM_DATA_SIZE     = SIZEOF(.data);
__RAM_DATA_ADDR     = ADDR(.data);

__ROM_SDATA_SIZE    = SIZEOF(.sdata);
__ROM_SDATA_ADDR    = __START_SDATA+SIZEOF(.data);
__RAM_SDATA_ADDR    = ADDR(.sdata);
 
__ROM_SDATA2_ADDR   = __ROM_SDATA_ADDR+SIZEOF(.sdata);
__ROM_SDATA2_SIZE   = SIZEOF(.sdata2);

__RAM_SBSS_SIZE     = SIZEOF(.sbss);
__RAM_SBSS_ADDR     = ADDR(.sbss);

__RAM_BSS_SIZE      = SIZEOF(.bss);
__RAM_BSS_ADDR      = ADDR(.bss);         

__SRAM_BASE_ADDR    = ADDR(internal_ram);
__SRAM_SIZE         = 0x000B000;

/* Interrupt Handler Parameters */
__IVPR              = ADDR(.xptn_vectors);

__SP_INIT           = _stack_addr;

