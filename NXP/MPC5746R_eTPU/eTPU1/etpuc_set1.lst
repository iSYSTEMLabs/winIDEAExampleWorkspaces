
ETPU "C" COMPILER 1.0.154.990                                           PAGE  1


                                        /**************************************************************************/
                                        /* ETPU function set                                                      */
                                        /*                                                                        */
                                        /* FILE NAME: etpuc_set1.c                                                */
                                        /**************************************************************************/

                                        /**********************/
                                        /* Define memory size */
                                        /**********************/
                                        /* Use a 6k memory starting at 0 */
0400 1000                               #pragma memory ROM[(4 * (1024))] @ 0x400;

                                        /*******************************/
                                        /* Define entry table location */
                                        /*******************************/
                                        /* Put entry table at the beginning of memory so that it is not
                                           dependent on memory size. */
                                        #pragma entryaddr 0x0000;

0001                                    int24 Global_Error = 0xFF;

                                        void Global_Error_Func();
                                        void Global_Error_Func1();
                                        int24 f(int24 i);

                                        /*************************/
                                        /* Include the functions */
                                        /*************************/

                                        // test function
00000000                                #define H0_FUNCTION_NUMBER 0
                                        #include "m_0.c"
                                        #include <etpuc.h>
                                        #ifndef __ETPUC_H
0008                                    #define __ETPUC_H

                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario

ETPU "C" COMPILER 1.0.154.990                                           PAGE  2


                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *
                                         */
0000                                         register_ac        ac   ;      // 24 bits
0000                                         register_b         b    ;      // 24 bits
0000                                         register_c         c    ;      // 24 bits
0000                                         register_d         d    ;      // 24 bits
0000                                         register_chan      chan ;      //  5 bits
0000                                         register_diob      diob ;      // 24 bits
0000                                         register_erta      erta ;      // 24 bits
0000                                         register_ertb      ertb ;      // 24 bits
0000                                         register_link      link ;      //  8 bits
0000                                         register_mach      mach ;      // 24 bits
0000                                         register_macl      macl ;      // 24 bits
0000                                         register_p         p    ;      // 24 bits
0000                                         register_rar       rar  ;      // 14 bits
0000                                         register_sr        sr   ;      // 24 bits
0000                                         register_tcr1      tcr1 ;      // 24 bits
0000                                         register_tcr2      tcr2 ;      // 24 bits
0000                                         register_tpr       tpr  ;      // 16 bits
0000                                         register_trr       trr  ;      // 24 bits
0000                                         register_chan_base chan_base;  // 24 bits
                                        /*
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */
                                        /*
                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits
                                        */
                                        /*
                                           The link request can be set by copying the

ETPU "C" COMPILER 1.0.154.990                                           PAGE  3


                                           channel number into the link register. The
                                           following definition does this.
                                         */

0009                                    #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;
                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

0000                                    chan_struct channel;

000A                                    #define erwA       channel.ERWA
000B                                    #define erwB       channel.ERWB

000C                                    #define flc        channel.FLC

ETPU "C" COMPILER 1.0.154.990                                           PAGE  4


000D                                    #define ipacA      channel.IPACA
000E                                    #define ipacB      channel.IPACB
000F                                    #define lsr        channel.LSR

0010                                    #define mrlA       channel.MRLA
0011                                    #define mrlB       channel.MRLB
0012                                    #define mrle       channel.MRLE
0013                                    #define mtd        channel.MTD
0014                                    #define opacA      channel.OPACA
0015                                    #define opacB      channel.OPACB
0016                                    #define pdcm       channel.PDCM
0017                                    #define pin        channel.PIN
0018                                    #define act_unitA  channel.TBSA
0019                                    #define act_unitB  channel.TBSB
001A                                    #define tdl        channel.TDL
001B                                    #define flag0      channel.FLAG0
001C                                    #define flag1      channel.FLAG1
001D                                    #define fm0        channel.FM0
001E                                    #define fm1        channel.FM1
001F                                    #define pss        channel.PSS
0020                                    #define psti       channel.PSTI
0021                                    #define psto       channel.PSTO
0022                                    #define tdlA       channel.TDLA
0023                                    #define tdlB       channel.TDLB


                                        // IPAC 1,2
00000000                                #define no_detect                 0
00000001                                #define low_high                  1
00000002                                #define high_low                  2
00000003                                #define any_trans                 3
00000004                                #define detect_input_0_on_match   4
00000005                                #define detect_input_1_on_match   5
00000007                                #define no_change_ipac            7

                                        // OPAC 1,2  fields

00000000                                #define match_no_change   0
00000001                                #define match_high        1
00000002                                #define match_low         2
00000003                                #define match_toggle      3
00000001                                #define opac_high         1
00000002                                #define opac_low          2
00000003                                #define toggle            3
00000004                                #define opac_high_low     4
00000005                                #define opac_low_high     5
00000004                                #define transition_low    4
00000005                                #define transition_high   5
00000006                                #define transition_toggle 6

                                        // PDCM fields
00000000                                #define em_b_st  0              //Either Match, Blocking, Single Transition
00000001                                #define em_b_dt  1              //Either Match, Blocking, Double Transition
00000002                                #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
00000003                                #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition

ETPU "C" COMPILER 1.0.154.990                                           PAGE  5


00000004                                #define m2_st    4              //Match2, Single, Transition
00000005                                #define m2_dt    5              //Match2, Double, Transition
00000006                                #define bm_st    6              //Both Match, Single Transition
00000007                                #define bm_dt    7              //Both Match, Double Transition
00000008                                #define m2_o_st  8              //Match2, Ordered, Single Transition
00000009                                #define m2_o_dt  9              //Match2, Ordered, Double Transition
0000000E                                #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
0000000C                                #define sm_st    0xC                //Single Match, Single Transition
0000000D                                #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
00000000                                #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
00000001                                #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
00000002                                #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
00000003                                #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
00000004                                #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
00000005                                #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
00000006                                #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
00000007                                #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

00000008                                #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
00000009                                #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
0000000F                                #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
00000000                                #define Capture_tcr1        0       //TBSx[2] = 0
00000002                                #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
0000 0A 00                                int TICKS   : 10;
0001 01 02                                int TPR10   : 1;
0001 01 03                                int HOLD    : 1;
0001 01 04                                int IPH     : 1;
0001 02 05                                int MISSCNT : 2;
0001 01 07                                int LAST    : 1;
0000                                      } ;

                                        // pin definitions
                                        //   pin = pin_high;
00000000                                #define pin_opacA  0
00000001                                #define pin_opacB  1
00000002                                #define pin_high   2
00000004                                #define pin_low    4

                                        #endif /* __ETPUC_H */

                                        #include "production.h"
                                        #ifndef PRODUCTION_H
0024                                    #define PRODUCTION_H

                                        /* Includes */
                                        #include "compilerDirectives.h"
                                        #ifndef COMPILER_DIRECTIVES_H

ETPU "C" COMPILER 1.0.154.990                                           PAGE  6


0025                                    #define COMPILER_DIRECTIVES_H

                                        //#pragma force_active on
00000010                                #define F_CPU 16 //CPU frequency after reset in MHz

                                        //#pragma switch_tables off

                                        #endif //COMPILER_DIRECTIVES_H

                                        /* Defines */
00000001                                #define TRUE 1
00000000                                #define FALSE 0

                                        /* Function declaration */
                                        void productionDebugTestMain(void);
                                        void productionTraceTestMain(void);

                                        #endif //PRODUCTION_H

0000                                    #pragma ETPU_function handler0, standard @ H0_FUNCTION_NUMBER;

00000000                                #define PROD_TRACE_TEST_REQUEST   0
00000005                                #define PROD_DEBUG_TEST_REQUEST   5

                                        void handler0(void)
                                        {
                                          if( hsr == PROD_DEBUG_TEST_REQUEST )
                                          {
                                            while(1)
0400 FFC02A5F   call 0548,flush.            {
0404                                          productionDebugTestMain();
0404 FFC02C7F   call 058C,flush.              productionTraceTestMain();
0408 F7C0201F   jump 0400,flush.            }
                                             }
000E 41 00        00 S07 P01 ME 0400  HSR 5     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
 
0000             Thread Local RAM size
                                          else
                                          {
                                            while(1)
040C FFC02A5F   call 0548,flush.            {
0410                                          productionDebugTestMain();
0410 FFC02C7F   call 058C,flush.              productionTraceTestMain();
0414 F7C0207F   jump 040C,flush.            }
                                             }
0000 C1 03        00 S00 P23 ME 040C  HSR 1     lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0
0002 C1 03        00 S01 P23 ME 040C  HSR 1     lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1
0004 C1 03        00 S02 P23 ME 040C  HSR 1     lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0
0006 C1 03        00 S03 P23 ME 040C  HSR 1     lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1
0008 C1 03        00 S04 P23 ME 040C  HSR 2     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
000A C1 03        00 S05 P23 ME 040C  HSR 3     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
000C C1 03        00 S06 P23 ME 040C  HSR 4     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
0010 C1 03        00 S08 P23 ME 040C  HSR 6     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
0012 C1 03        00 S09 P23 ME 040C  HSR 7     lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
0014 C1 03        00 S0A P23 ME 040C  HSR 0     lsr 1  m1 1  m2 1  pin x  flag1 x  flag0 0

ETPU "C" COMPILER 1.0.154.990                                           PAGE  7


0016 C1 03        00 S0B P23 ME 040C  HSR 0     lsr 1  m1 1  m2 1  pin x  flag1 x  flag0 1
0018 C1 03        00 S0C P23 ME 040C  HSR 0     lsr 0  m1 0  m2 1  pin 0  flag1 x  flag0 0
001A C1 03        00 S0D P23 ME 040C  HSR 0     lsr 0  m1 0  m2 1  pin 0  flag1 x  flag0 1
001C C1 03        00 S0E P23 ME 040C  HSR 0     lsr 0  m1 0  m2 1  pin 1  flag1 x  flag0 0
001E C1 03        00 S0F P23 ME 040C  HSR 0     lsr 0  m1 0  m2 1  pin 1  flag1 x  flag0 1
0020 C1 03        00 S10 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 0  pin 0  flag1 x  flag0 0
0022 C1 03        00 S11 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 0  pin 0  flag1 x  flag0 1
0024 C1 03        00 S12 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 0  pin 1  flag1 x  flag0 0
0026 C1 03        00 S13 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 0  pin 1  flag1 x  flag0 1
0028 C1 03        00 S14 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 1  pin 0  flag1 x  flag0 0
002A C1 03        00 S15 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 1  pin 0  flag1 x  flag0 1
002C C1 03        00 S16 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 1  pin 1  flag1 x  flag0 0
002E C1 03        00 S17 P23 ME 040C  HSR 0     lsr 0  m1 1  m2 1  pin 1  flag1 x  flag0 1
0030 C1 03        00 S18 P23 ME 040C  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 0
0032 C1 03        00 S19 P23 ME 040C  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 1
0034 C1 03        00 S1A P23 ME 040C  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 0
0036 C1 03        00 S1B P23 ME 040C  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 1
0038 C1 03        00 S1C P23 ME 040C  HSR 0     lsr 1  m1 0  m2 1  pin x  flag1 x  flag0 0
003A C1 03        00 S1D P23 ME 040C  HSR 0     lsr 1  m1 0  m2 1  pin x  flag1 x  flag0 1
003C C1 03        00 S1E P23 ME 040C  HSR 0     lsr 1  m1 1  m2 0  pin x  flag1 x  flag0 0
003E C1 03        00 S1F P23 ME 040C  HSR 0     lsr 1  m1 1  m2 0  pin x  flag1 x  flag0 1
 
0000             Thread Local RAM size
0000             Local RAM requirements for eTPU Function handler0
                                        }

                                         /* Information exported to Host CPU program */

0418                                    #pragma write h, (::ETPUfilename (m_0_auto.h));
0418                                    #pragma write h, ( );
0418                                    #pragma write h, (/****************************************************************/);
0418                                    #pragma write h, (/* WARNING this file is automatically generated DO NOT EDIT IT! */);
0418                                    #pragma write h, (/****************************************************************/);
0418                                    #pragma write h, (#ifndef _M_0_AUTO_H_ );
0418                                    #pragma write h, (#define _M_0_AUTO_H_ );
0418                                    #pragma write h, ( );
0418                                    #pragma write h, (/* Function Configuration Information */);
0418                                    #pragma write h, (::ETPUliteral(#define FS_M_0_FUNCTION_NUMBER) H0_FUNCTION_NUMBER );
0418                                    #pragma write h, (::ETPUliteral(#define FS_M_0_TABLE_SELECT) ::ETPUentrytype(handler0) );
0418                                    #pragma write h, (::ETPUliteral(#define FS_M_0_NUM_PARMS) ::ETPUram(handler0) );
0418                                    #pragma write h, ( );
0418                                    #pragma write h, (/* Parameter Definitions */);
0418                                    #pragma write h, (::ETPUliteral(#define DEBUG_LOOP_CNT_LIMIT_ADDR) ::ETPUlocation (debugLoopCountLimit) );
0418                                    #pragma write h, (::ETPUliteral(#define TRACE_LOOP_CNT_LIMIT_ADDR) ::ETPUlocation (traceLoopCountLimit) );
0418                                    #pragma write h, ( );
0418                                    #pragma write h, (#endif );
0418                                    #pragma write h, ( );









ETPU "C" COMPILER 1.0.154.990                                           PAGE  8



                                        // PWM (Pulse Width Modulation) function
00000001                                #define PWM_FUNCTION_NUMBER 1
                                        #include "etpuc_pwm.c"
                                        /****************************************************************************/
                                        /* FILE NAME: etpuc_pwm.c                      COPYRIGHT (c) Freescale 2004 */
                                        /* VERSION:  1.05                                   All Rights Reserved     */
                                        /*                                                                          */
                                        /* DESCRIPTION:                                                             */
                                        /* This function generals a PWM (Pulse Width Modulated) waveform in which   */
                                        /* the frequency and duty can be changed at any time by the CPU. The        */
                                        /* function can generate 0% and 100% output. The function uses both actions */
                                        /* on the channel hardware so it can generate small output pulses.          */
                                        /*==========================================================================*/
                                        /* UPDATE HISTORY                                                           */
                                        /* REV      AUTHOR      DATE       DESCRIPTION OF CHANGE                    */
                                        /* ---   -----------  ---------    ---------------------                    */
                                        /* 0.01  J. Loeliger  02/Feb/04  Initial version of file.                   */
                                        /* 0.02  J. Loeliger  12/Feb/04  Updated comments. Removed clear trans-     */
                                        /*                                 latch in S6, it is better if this is     */
                                        /*                                 handled by the error function.           */
                                        /* 0.03  J. Loeliger  17/Feb/04  Updated after review/feedback from Milan   */
                                        /*                                Added mrlA test in S2 and added code in S3*/
                                        /*                                because of compiler issue.                */
                                        /* 1.00  J. Loeliger  25/May/04  Changed from Motorola to Freescale.        */
                                        /*                               Changed all comments to standard C style.  */
                                        /*                               Fixed problem in S0 when using TCR2, first */
                                        /*                                edge was based on TCR1.                   */
                                        /*                               Added EnableOutputBuffer(); in S0.         */
                                        /*                               Added PWM_ prefix to macros to prevent     */
                                        /*                                problems when used with other functions.  */
                                        /*                               Changed to standard error routine for      */
                                        /*                                unused entry points.                      */
                                        /*                               Combined S1 & S2. The pin condition can not*/
                                        /*                                be used in the entry because it might not */
                                        /*                                be connected to the output.               */
                                        /*                               Fixed problem if 0% was selected during    */
                                        /*                                init. 100% was generated for first period.*/
                                        /*                                Reworked S0 and combined with S4 & S5.    */
                                        /* 1.01  J. Loeliger   1/Jun/04  Changed the idle state if the selected TCR */
                                        /*                                is not running from active state to in-   */
                                        /*                                active state [erta=tcrx->erta=tcrx+1]     */
                                        /* 1.02  J. Loeliger  21/Jun/04  Swapped flag0 & flag1 to fix problem with  */
                                        /*                                immediate update mode. More optimizations.*/
                                        /* 1.03  J. Loeliger  25/Jun/04  Added option comment in auto generated file*/
                                        /*                                for the CGT.                              */
                                        /* 1.04  J. Loeliger  16/Jul/04  Added S2 back in. It recalcuates the edge  */
                                        /*                                for the next frame.                       */
                                        /* 1.05  J. Loeliger  19/Jul/04  Coherent update fix. Had to add a new flag */
                                        /*                                parameter so coherent update can test the */
                                        /*                                value in flag0.                           */
                                        /****************************************************************************/
                                        #include "eTPUc.h"          /*Defines eTPU hardware*/
                                        #ifndef __ETPUC_H
                                        #define __ETPUC_H

ETPU "C" COMPILER 1.0.154.990                                           PAGE  9



                                        /*
                                         *  eTPU C Code Development System
                                         *
                                         *  Processor register definitions
                                         *  for the eTPU C Code Development System.
                                         *
                                         *  This code may be adapted for any purpose
                                         *  when used with the eTPU C Code Development
                                         *  System.  No warranty is implied or given
                                         *  as to their usability for any purpose.
                                         *
                                         *  (c) Copyright 2002-2004 Byte Craft Limited
                                         *  421 King St.N., Waterloo, ON, Canada, N2J 4E4
                                         *  VOICE: 1 (519) 888 6911
                                         *  FAX  : 1 (519) 746 6751
                                         *  email: support@bytecraft.com
                                         *
                                         *  Byte Craft Limited
                                         *  Waterloo, Ontario
                                         *  Canada N2J 4E4
                                         *  (519) 888-6911
                                         *
                                         *  Walter Banks
                                         *
                                         * Revision history
                                         * ----------------
                                         * V0.90  WB    Nov 2003  First pre-release of etpuc.h based on V1.10 etpu.h with
                                         *                        changes to reflect eTPU naming conventions
                                         * V1.00  WB    Nov 2003  First release changes to the channel fields to reflect
                                         *                        naming conventions for eTPU
                                         * V1.01  WB    Dec 2003  Corrected definitions of pin_opacA and pin_opacB
                                         *
                                         *
                                         *
                                         *  All of the eTPU registers can be directly accessed from C
                                         *
                                         */
                                             register_ac        ac   ;      // 24 bits
                                             register_b         b    ;      // 24 bits
                                             register_c         c    ;      // 24 bits
                                             register_d         d    ;      // 24 bits
                                             register_chan      chan ;      //  5 bits
                                             register_diob      diob ;      // 24 bits
                                             register_erta      erta ;      // 24 bits
                                             register_ertb      ertb ;      // 24 bits
                                             register_link      link ;      //  8 bits
                                             register_mach      mach ;      // 24 bits
                                             register_macl      macl ;      // 24 bits
                                             register_p         p    ;      // 24 bits
                                             register_rar       rar  ;      // 14 bits
                                             register_sr        sr   ;      // 24 bits
                                             register_tcr1      tcr1 ;      // 24 bits
                                             register_tcr2      tcr2 ;      // 24 bits
                                             register_tpr       tpr  ;      // 16 bits

ETPU "C" COMPILER 1.0.154.990                                           PAGE 10


                                             register_trr       trr  ;      // 24 bits
                                             register_chan_base chan_base;  // 24 bits
                                        /*
                                        */

                                        /* The following registers are defined for
                                           eTPU C application code */
                                        /*
                                             register_chan       chan ;       //  5 bits
                                             register_erta       erta ;       // 24 bits
                                             register_ertb       ertb ;       // 24 bits
                                             register_tcr1       tcr1 ;       // 24 bits
                                             register_tcr2       tcr2 ;       // 24 bits
                                             register_tpr        tpr  ;       // 16 bits
                                             register_trr        trr  ;       // 24 bits
                                             register_chan_base  chan_base;   // 24 bits
                                             register_link       link;        // 8 bits
                                        */
                                        /*
                                           The link request can be set by copying the
                                           channel number into the link register. The
                                           following definition does this.
                                         */

                                        #define link_request(channel) link = channel

                                        /*
                                         *
                                         *
                                         *  All of the eTPU channel fields are predefined as a
                                         *  large C structure (chan_struct) by the eTPU C compiler.
                                         *
                                         *  struct chan {
                                         *               CIRC   int : 2 ;
                                         *               ERWA   int : 1 ;
                                         *               ERWB   int : 1 ;
                                         *               FLC    int : 3 ;
                                         *               IPACA  int : 3 ;
                                         *               IPACB  int : 3 ;
                                         *               LSR    int : 1 ;  // w test
                                         *               MRLA   int : 1 ;  // w test
                                         *               MRLB   int : 1 ;  // w test
                                         *               MRLE   int : 1 ;
                                         *               MTD    int : 2 ;
                                         *               OPACA  int : 3 ;
                                         *               OPACB  int : 3 ;
                                         *               PDCM   int : 4 ;
                                         *               PIN    int : 3 ;
                                         *               TBSA   int : 4 ;
                                         *               TBSB   int : 4 ;
                                         *               TDL    int : 1 ;
                                         *               SMPR   int : 2 ;
                                         * State Resolution
                                         *               FLAG0  int : 1 ;  // w only also defined in FLC
                                         *               FLAG1  int : 1 ;

ETPU "C" COMPILER 1.0.154.990                                           PAGE 11


                                         * Channel Flags
                                         *               FM0    int : 1 ;
                                         *               FM1    int : 1 ;
                                         *         //    LSR    int : 1 ;  // also channel fields
                                         *         //    MRLA   int : 1 ;  // also channel fields
                                         *         //    MRLB   int : 1 ;  // also channel fields
                                         *               PSS    int : 1 ;
                                         *               PSTI   int : 1 ;
                                         *               PSTO   int : 1 ;
                                         *               TDLA   int : 1 ;
                                         *               TDLB   int : 1 ;
                                         *              }
                                         ***/

                                        chan_struct channel;

                                        #define erwA       channel.ERWA
                                        #define erwB       channel.ERWB

                                        #define flc        channel.FLC
                                        #define ipacA      channel.IPACA
                                        #define ipacB      channel.IPACB
                                        #define lsr        channel.LSR

                                        #define mrlA       channel.MRLA
                                        #define mrlB       channel.MRLB
                                        #define mrle       channel.MRLE
                                        #define mtd        channel.MTD
                                        #define opacA      channel.OPACA
                                        #define opacB      channel.OPACB
                                        #define pdcm       channel.PDCM
                                        #define pin        channel.PIN
                                        #define act_unitA  channel.TBSA
                                        #define act_unitB  channel.TBSB
                                        #define tdl        channel.TDL
                                        #define flag0      channel.FLAG0
                                        #define flag1      channel.FLAG1
                                        #define fm0        channel.FM0
                                        #define fm1        channel.FM1
                                        #define pss        channel.PSS
                                        #define psti       channel.PSTI
                                        #define psto       channel.PSTO
                                        #define tdlA       channel.TDLA
                                        #define tdlB       channel.TDLB


                                        // IPAC 1,2
                                        #define no_detect                 0
                                        #define low_high                  1
                                        #define high_low                  2
                                        #define any_trans                 3
                                        #define detect_input_0_on_match   4
                                        #define detect_input_1_on_match   5
                                        #define no_change_ipac            7


ETPU "C" COMPILER 1.0.154.990                                           PAGE 12


                                        // OPAC 1,2  fields

                                        #define match_no_change   0
                                        #define match_high        1
                                        #define match_low         2
                                        #define match_toggle      3
                                        #define opac_high         1
                                        #define opac_low          2
                                        #define toggle            3
                                        #define opac_high_low     4
                                        #define opac_low_high     5
                                        #define transition_low    4
                                        #define transition_high   5
                                        #define transition_toggle 6

                                        // PDCM fields
                                        #define em_b_st  0              //Either Match, Blocking, Single Transition
                                        #define em_b_dt  1              //Either Match, Blocking, Double Transition
                                        #define em_nb_st 2              //Either Match, NonBlocking, Single Transition
                                        #define em_nb_dt 3              //Either Match, NonBlocking, Double Transition
                                        #define m2_st    4              //Match2, Single, Transition
                                        #define m2_dt    5              //Match2, Double, Transition
                                        #define bm_st    6              //Both Match, Single Transition
                                        #define bm_dt    7              //Both Match, Double Transition
                                        #define m2_o_st  8              //Match2, Ordered, Single Transition
                                        #define m2_o_dt  9              //Match2, Ordered, Double Transition
                                        #define sm_st_e  0xE                //Single Match, Single Transition, Enhanced
                                        #define sm_st    0xC                //Single Match, Single Transition
                                        #define sm_dt    0xD                //Single Match, Double Transition

                                        // Time Bases Selection for match and capture
                                        #define Mtcr1_Ctcr1_ge       0      //Match tcr1, Capture tcr1, greater than
                                        #define Mtcr2_Ctcr1_ge       1      //Match tcr2, Capture tcr1, greater than
                                        #define Mtcr1_Ctcr2_ge       2      //Match tcr1, Capture tcr2, greater than
                                        #define Mtcr2_Ctcr2_ge       3      //Match tcr2, Capture tcr2, greater than
                                        #define Mtcr1_Ctcr1_eq       4      //Match tcr1, Capture tcr1, equal
                                        #define Mtcr2_Ctcr1_eq       5      //Match tcr2, Capture tcr1, equal
                                        #define Mtcr1_Ctcr2_eq       6      //Match tcr1, Capture tcr2, equal
                                        #define Mtcr2_Ctcr2_eq       7      //Match tcr2, Capture tcr2, equal

                                        #define enable_output_buffer  8     // TBSx[3] = 1, TBSx[2:0] = 000
                                        #define disable_output_buffer 9     // TBSx[3] = 1, TBSx[2:0] = 001
                                        #define do_nothing       15     // TBSx[3] = 1, TBSx[2:0] = 111

                                        // Time Bases Selection for transition and capture
                                        #define Capture_tcr1        0       //TBSx[2] = 0
                                        #define Capture_tcr2        2       //TBSx[2] = 1

                                        // Tooth Program Register structure

                                        struct tpr_struct {
                                          int TICKS   : 10;
                                          int TPR10   : 1;
                                          int HOLD    : 1;
                                          int IPH     : 1;

ETPU "C" COMPILER 1.0.154.990                                           PAGE 13


                                          int MISSCNT : 2;
                                          int LAST    : 1;
                                          } ;

                                        // pin definitions
                                        //   pin = pin_high;
                                        #define pin_opacA  0
                                        #define pin_opacB  1
                                        #define pin_high   2
                                        #define pin_low    4

                                        #endif /* __ETPUC_H */

                                        #include "eTPUc_common.h"   /*Standard way to use eTPU*/
                                        /********************************************************************************/
                                        /* FILE NAME: etpuc_common.h                        COPYRIGHT (c) MOTOROLA 2003 */
                                        /* VERSION:  0.9                                    All Rights Reserved         */
                                        /*                                                                              */
                                        /* This file is maintained as part of the support for the eTPU C development    */
                                        /* tools by Byte Craft Limited.                                                 */
                                        /*                                                                              */
                                        /* This code may be adapted for any purpose when used with the                  */
                                        /* eTPU C Code Development System.  No warranty is implied or                   */
                                        /* given as to their usability for any purpose. Portions of this                */
                                        /* file is Copyright Motorola.                                                  */
                                        /*                                                                              */
                                        /*  (c) Copyright 2002-2004 Byte Craft Limited                                  */
                                        /*  421 King St.N., Waterloo, ON, Canada, N2J 4E4                               */
                                        /*  VOICE: 1 (519) 888 6911                                                     */
                                        /*  email: support@bytecraft.com                                                */
                                        /*                                                                              */
                                        /*  Walter Banks                                                                */
                                        /*                                                                              */
                                        /*                                                                              */
                                        /* DESCRIPTION: This file defines the application friendly macros, functions    */
                                        /*              for common task like channel set up and register control fields */
                                        /*              access.                                                         */
                                        /*                                                                              */
                                        /*              etpuc_common.h is based follow header files commonly used by    */
                                        /*              eTPU development community:                                     */
                                        /*              AshWareETpu.h - developped by Andy Klumpp from Ash Ware         */
                                        /*              Mike.h - developped by Mike Pauwels from Motorola               */
                                        /*              etpu_common.h - developped by Ming Li from Motorola             */
                                        /*              Jeff Leoliger from Motorola and Walter Banks from Byte Craft    */
                                        /*              also made significant contibution.                              */
                                        /*==============================================================================*/
                                        /* UPDATE HISTORY                                                               */
                                        /* REV      AUTHOR        DATE      DESCRIPTION OF CHANGE                       */
                                        /* ---      -------      --------    ---------------------                      */
                                        /* 0.0      Ming Li      10/30/03    Initial creation                           */
                                        /* 0.1      Ming Li      11/12/03    Updated to incorporate comments from eTPU  */
                                        /*                                   development community.                     */
                                        /* 0.2      Walter Banks 15 Dec 03   Made changes to be reflect definitions in  */
                                        /*                                   eTPUc.h                                    */
                                        /*                                   Corrected IsTransALatched()                */

ETPU "C" COMPILER 1.0.154.990                                           PAGE 14


                                        /*                                             IsTransBLatched()                */
                                        /*                                   Added missing definitions                  */
                                        /*                                             set_pin_per_opacA                */
                                        /*                                             set_pin_per_opacB                */
                                        /*                                             force_pin_high                   */
                                        /*                                             force_pin_low                    */
                                        /*                                   Corrected opac1 to opacA                   */
                                        /*                                             opac2 to opacB                   */
                                        /*                                                                              */
                                        /* 0.3      Walter Banks  5 Jan 04   Corrected opacB = pin_action; to           */
                                        /*                                     opacA = pin_action;                      */
                                        /* 0.4     J. Loeliger    21/Jan/04  Cleared up reorganized and added more:     */
                                        /*                                   -Moved TRUE & FALSE to top and added       */
                                        /*                                      conditional                             */
                                        /*                                   -Moved entry conditions up and added macros*/
                                        /*                                      for all conditions                      */
                                        /*                                   -Merged with AshWareETpu.h                 */
                                        /*                                   -Removed commet with of PDCM names.        */
                                        /*                                   -Grouped latches and flags together.       */
                                        /*                                     -added new set and clear for latches and */
                                        /*                                        flags                                 */
                                        /*                                   -Merged output pin value to 1 set rather   */
                                        /*                                      than 2                                  */
                                        /*                                   -Added long channel mode names.            */
                                        /*                                   -Added SetupMatch_AB for better            */
                                        /*                                      optimization                            */
                                        /*                                   -Added match only conditions for output    */
                                        /*                                      functions.                              */
                                        /*                                   -Added new ActionUnintA/B macros           */
                                        /*                                   -Added new Pin macro                       */
                                        /*                                   -And more.                                 */
                                        /* 0.5     J. Loeliger     12/Feb/04 -Changed DetectTrans to OnTrans.           */
                                        /* 0.6     J. Loeliger     30/Mar/04 -Added SetupMatchB and fixed some old      */
                                        /*                                     references to 1 & 2 -> A & B             */
                                        /* 0.7     J. Loeliger     16/Apr/04 -Changed Disable match (MRLE) to =0        */
                                        /* 0.8     J. Loeliger     27/Apr/04 -Fixed Disable/Enable match in thread,     */
                                        /*                                      they were swapped.                      */
                                        /* 0.9     J. Loeliger     10/May/04 -Added support for OBE with new            */
                                        /*         M. Brejl                   EnableOutputBuffer()/DisableOutputBuffer()*/
                                        /*                                    Removed all // comments. Changed Motorola */
                                        /*                                    to Freescale.                             */
                                        /*                                    Fixed spelling mistake in GetCurentChanNum*/
                                        /********************************************************************************/
                                        #ifndef _ETPUC_COMMON__H_
0027                                    #define _ETPUC_COMMON__H_

                                        /*---------------------------------------------------------------------------+
                                        |                       Constants Definition                                 |
                                        +---------------------------------------------------------------------------*/
                                        #ifndef TRUE
                                        #define TRUE    1
                                        #endif

                                        #ifndef FALSE
                                        #define FALSE   0

ETPU "C" COMPILER 1.0.154.990                                           PAGE 15


                                        #endif

                                        /*--------------------------------------------------------------------------+
                                        |                      Entry Conditions Definition                          |
                                        +--------------------------------------------------------------------------*/
0028                                    #define HostServiceRequest               hsr
0029                                    #define IsHostServiceRequestEvent(num)   (hsr==num)

002A                                    #define MatchA_TransB                    (m1==1)
002B                                    #define IsMatchAOrTransitionBEvent()     (m1==1)
002C                                    #define matchA_transB                    (m1==1)

002D                                    #define MatchB_TransA                    (m2==1)
002E                                    #define IsMatchBOrTransitionAEvent()     (m2==1)
002F                                    #define matchB_transA                    (m2==1)

0030                                    #define linkRequest                      (lsr==1)
0031                                    #define IsLinkServiceRequestEvent()      (lsr==1)

                                        /*For output only functions */
0032                                    #define MatchA                           (m1==1)
0033                                    #define MatchB                           (m2==1)

                                        /*---------------------------------------------------------------------+
                                        |                        Latches and Flags                             |
                                        +---------------------------------------------------------------------*/
                                        /* Usage: Set(flag0 | flag0);*/
0034                                    #define Set(cond)     (cond = 1)

                                        /* Usage: Clear(flag0 | flag0 | LSRLatch | lsr | MatchALatch | mrlA |
                                                         MatchBLatch | mrlB | TransLatch | tdl);         */
0035                                    #define Clear(cond)   (cond = 0)

0036                                    #define ClrFlag0()            (channel.FLAG0 = 0)
0037                                    #define SetFlag0()            (channel.FLAG0 = 1)
0038                                    #define ClrFlag1()            (channel.FLAG1 = 0)
0039                                    #define SetFlag1()            (channel.FLAG1 = 1)

003A                                    #define ClearLSRLatch()                (lsr  = 0)
003B                                    #define ClearLinkServiceRequestEvent() (lsr  = 0)

003C                                    #define ClearMatchALatch()    (channel.MRLA = 0)
003D                                    #define ClearMatchAEvent()    (channel.MRLA = 0)

003E                                    #define ClearMatchBLatch()    (channel.MRLB = 0)
003F                                    #define ClearMatchBEvent()    (channel.MRLB = 0)

0040                                    #define ClearTransLatch()       (channel.TDL = 0)
0041                                    #define ClearTransitionEvents() (channel.TDL = 0)

0042                                    #define ClearAllLatches()   (lsr = 0);(mrlA = 0);(mrlB = 0);(tdl = 0);

                                        /* There are used with the clear macro */
0043                                    #define LSRLatch    lsr
0044                                    #define LatchedMatchA mrlA

ETPU "C" COMPILER 1.0.154.990                                           PAGE 16


0045                                    #define LatchedMatchB mrlB
0046                                    #define TransLatch  tdl

                                        /*---------------------------------------------------------------------+
                                        |                       Set Output Pin                                 |
                                        +---------------------------------------------------------------------*/
                                        /* usage: Pin( SetHigh | SetLow | PerPacA | PerPacB ); */
0047                                    #define Pin( state )          (channel.PIN=state)

0048                                    #define SetPinHigh()          (channel.PIN=pin_high)
0049                                    #define SetPinLow()           (channel.PIN=pin_low)
004A                                    #define SetPinPerPacA()       (channel.PIN=pin_opacA)
004B                                    #define SetPinPerPacB()       (channel.PIN=pin_opacB)

                                        /*These are used with the Pin macro */
00000002                                #define SetHigh                pin_high
00000004                                #define SetLow                 pin_low
00000000                                #define PerPacA                pin_opacA
00000001                                #define PerPacB                pin_opacB

                                        /*---------------------------------------------------------------------+
                                        |                      Branch Conditions                               |
                                        +----------------------------------------------------------------------*/
004C                                    #define SampledInputPin            channel.PSS
004D                                    #define IsLatchedInputPin()       (channel.PSS==1)
004E                                    #define IsSampledInputPinHigh()   (channel.PSS==1)
004F                                    #define IsLatchedInputPinHigh()   (channel.PSS==1)

0050                                    #define CurrentInputPin            channel.PSTI
0051                                    #define IsCurrentInputPin()       (channel.PSTI==1)
0052                                    #define IsCurrentInputPinHigh()   (channel.PSTI==1)

0053                                    #define CurrentOutputPin           channel.PSTO
0054                                    #define IsCurrentOutputPin()      (channel.PSTO==1)
0055                                    #define IsCurrentOutputPinHigh()  (channel.PSTO==1)

0056                                    #define TransitionALatch           channel.TDLA
0057                                    #define IsTransALatched()         (channel.TDLA==1)
0058                                    #define IsLatchedTransitionA()    (channel.TDLA==1)

0059                                    #define TransitionBLatch           channel.TDLB
005A                                    #define IsTransBLatched()         (channel.TDLB==1)
005B                                    #define IsLatchedTransitionB()    (channel.TDLB==1)

005C                                    #define MatchALatch            channel.MRLA
005D                                    #define IsMatchALatched()     (channel.MRLA==1)
005E                                    #define IsLatchedMatchA()           (channel.MRLA==1)

005F                                    #define MatchBLatch            channel.MRLB
0060                                    #define IsMatchBLatched()     (channel.MRLB==1)
0061                                    #define IsLatchedMatchB()           (channel.MRLB==1)

0062                                    #define LinkServiceRequest     channel.LSR
0063                                    #define IsLinkReqActive()     (channel.LSR==1)
0064                                    #define IsSampledLink()       (channel.LSR==1)

ETPU "C" COMPILER 1.0.154.990                                           PAGE 17


0065                                    #define IsLatchedLink()       (channel.LSR==1)

0066                                    #define FunctionMode0          channel.FM0
0067                                    #define IsFunctionMode0()     (channel.FM0==1)
0068                                    #define IsSampledFuncMode0()  (channel.FM0==1)
0069                                    #define IsLatchedFuncMode0()  (channel.FM0==1)

006A                                    #define FunctionMode1          channel.FM1
006B                                    #define IsFunctionMode1()     (channel.FM1==1)
006C                                    #define IsSampledFuncMode1()  (channel.FM1==1)
006D                                    #define IsLatchedFuncMode1()  (channel.FM1==1)

                                        /*---------------------------------------------------------------------+
                                        |                      Channel Modes                                   |
                                        +---------------------------------------------------------------------*/
006E                                    #define EitherMatchBlockingSingleTransition()     channel.PDCM = em_b_st
006F                                    #define EitherMatchBlockingDoubleTransition()     channel.PDCM = em_b_dt
0070                                    #define EitherMatchNonBlockingSingleTransition()  channel.PDCM = em_nb_st
0071                                    #define EitherMatchNonBlockingDoubleTransition()  channel.PDCM = em_nb_dt
0072                                    #define Match2SingleTransition()                  channel.PDCM = m2_st
0073                                    #define Match2DoubleTransition()                  channel.PDCM = m2_dt
0074                                    #define BothMatchSingleTransition()               channel.PDCM = bm_st
0075                                    #define BothMatchDoubleTransition()               channel.PDCM = bm_dt
0076                                    #define Match2OrderedSingleBlockingTransition()   channel.PDCM = m2_o_st
0077                                    #define Match2OrderedDoubleTransition()           channel.PDCM = m2_o_dt
0078                                    #define SingleMatchSingleTransitionEnhanced()     channel.PDCM = sm_st_e
0079                                    #define SingleMatchSingleTransition()             channel.PDCM = sm_st
007A                                    #define SingleMatchDoubleTransition()             channel.PDCM = sm_dt

007B                                    #define SetChannelMode(mode)    (channel.PDCM = mode)

                                        /*---------------------------------------------------------------------+
                                        |                         Action Units                                 |
                                        +---------------------------------------------------------------------*/
                                        /*Usage: ActionUnitA( MatchTCR1 | MatchTCR2, CaptureTCR1 | CaptureTCR2, \
                                                                GreaterEqual | EqualOnly);             */
007C                                    #define ActionUnitA( match, capture, compare)   (act_unitA=match##capture##compare)
007D                                    #define ActionUnitB( match, capture, compare)   (act_unitB=match##capture##compare)

007E                                    #define MatchTCR1    Mtcr1_
007F                                    #define MatchTCR2    Mtcr2_
0080                                    #define CaptureTCR1  Ctcr1_
0081                                    #define CaptureTCR2  Ctcr2_
0082                                    #define GreaterEqual ge
0083                                    #define EqualOnly    eq

                                        /* Action Unit A, Time Bases for match and capture */
0084                                    #define TimeBaseAMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr1_Ctcr1_ge
0085                                    #define TimeBaseAMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSA = Mtcr2_Ctcr1_ge
0086                                    #define TimeBaseAMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr1_Ctcr2_ge
0087                                    #define TimeBaseAMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSA = Mtcr2_Ctcr2_ge
0088                                    #define TimeBaseAMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr1_eq
0089                                    #define TimeBaseAMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr1_eq
008A                                    #define TimeBaseAMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr1_Ctcr2_eq
008B                                    #define TimeBaseAMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSA = Mtcr2_Ctcr2_eq

ETPU "C" COMPILER 1.0.154.990                                           PAGE 18



                                        /* Action Unit B, Time Bases for match and capture */
008C                                    #define TimeBaseBMatchTcr1CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr1_Ctcr1_ge
008D                                    #define TimeBaseBMatchTcr2CaptureTcr1GreaterEqual()      channel.TBSB = Mtcr2_Ctcr1_ge
008E                                    #define TimeBaseBMatchTcr1CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr1_Ctcr2_ge
008F                                    #define TimeBaseBMatchTcr2CaptureTcr2GreaterEqual()      channel.TBSB = Mtcr2_Ctcr2_ge
0090                                    #define TimeBaseBMatchTcr1CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr1_eq
0091                                    #define TimeBaseBMatchTcr2CaptureTcr1ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr1_eq
0092                                    #define TimeBaseBMatchTcr1CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr1_Ctcr2_eq
0093                                    #define TimeBaseBMatchTcr2CaptureTcr2ExactlyEqual()      channel.TBSB = Mtcr2_Ctcr2_eq

                                        /*---------------------------------------------------------------------+
                                        |                         Output Pin Action                            |
                                        +----------------------------------------------------------------------*/
                                        /* usage: OnMatchA( NoChange | PinHigh | PinLow | PinToggle ); */
0094                                    #define OnMatchA(action)      (opacA = action)
0095                                    #define OnMatchB(action)      (opacB = action)

00000000                                #define NoChange    match_no_change
00000001                                #define PinHigh     match_high
00000002                                #define PinLow      match_low
00000003                                #define PinToggle   match_toggle

                                        /* Action Unit A, Output Pin Actions */
0096                                    #define OnMatchAPinNoChange()      channel.OPACA = match_no_change
0097                                    #define OnMatchAPinHigh()          channel.OPACA = match_high
0098                                    #define OnMatchAPinLow()           channel.OPACA = match_low
0099                                    #define OnMatchAPinToggle()        channel.OPACA = match_toggle
009A                                    #define OnInputActionAPinLow()     channel.OPACA = transition_low
009B                                    #define OnInputActionAPinHigh()    channel.OPACA = transition_high
009C                                    #define OnInputActionAPinToggle()  channel.OPACA = transition_toggle

                                        /* Action Unit B, Output Pin Actions */
009D                                    #define OnMatchBPinNoChange()      channel.OPACB = match_no_change
009E                                    #define OnMatchBPinHigh()          channel.OPACB = match_high
009F                                    #define OnMatchBPinLow()           channel.OPACB = match_low
00A0                                    #define OnMatchBPinToggle()        channel.OPACB = match_toggle
00A1                                    #define OnInputActionBPinLow()     channel.OPACB = transition_low
00A2                                    #define OnInputActionBPinHigh()    channel.OPACB = transition_high
00A3                                    #define OnInputActionBPinToggle()  channel.OPACB = transition_toggle

                                        /*---------------------------------------------------------------------+
                                        |                         Input Pin Action                             |
                                        +----------------------------------------------------------------------*/
                                        /*usage: DetectTransA( no_detect | low_high | high_low | any_trans | ...); */
00A4                                    #define OnTransA(action)     (ipacA = action)
00A5                                    #define OnTransB(action)     (ipacB = action)

00000000                                #define NoDetect  no_detect
00000001                                #define LowHigh   low_high
00000002                                #define HighLow   high_low
00000003                                #define AnyTrans  any_trans

                                        /* Action Unit A, Input Pin Edge Detection */
00A6                                    #define DetectADisable()        channel.IPACA = no_detect

ETPU "C" COMPILER 1.0.154.990                                           PAGE 19


00A7                                    #define DetectARisingEdge()     channel.IPACA = low_high
00A8                                    #define DetectAFallingEdge()    channel.IPACA = high_low
00A9                                    #define DetectAAnyEdge()        channel.IPACA = any_trans
00AA                                    #define DetectALowOnMatchA()    channel.IPACA = detect_input_0_on_match
00AB                                    #define DetectAHighOnMatchA()   channel.IPACA = detect_input_1_on_match

                                        /* Action Unit B, Input Pin Edge Detection */
00AC                                    #define DetectBDisable()        channel.IPACB = no_detect
00AD                                    #define DetectBRisingEdge()     channel.IPACB = low_high
00AE                                    #define DetectBFallingEdge()    channel.IPACB = high_low
00AF                                    #define DetectBAnyEdge()        channel.IPACB = any_trans
00B0                                    #define DetectBLowOnMatchA()    channel.IPACB = detect_input_0_on_match
00B1                                    #define DetectBHighOnMatchA()   channel.IPACB = detect_input_1_on_match

                                        /*---------------------------------------------------------------------+
                                        |  Writing the match registers and enabling/disabling the Match        |
                                        |    Recognition Latch Enable                                          |
                                        +---------------------------------------------------------------------*/
00B2                                    #define WriteErtAToMatchAAndEnable()   channel.ERWA = 0
00B3                                    #define EnableMatchA()                (channel.ERWA = 0)

00B4                                    #define WriteErtBToMatchBAndEnable()   channel.ERWB = 0
00B5                                    #define EnableMatchB()                (channel.ERWB = 0)

00B6                                    #define DisableMatchDetection();       channel.MRLE=0
00B7                                    #define DisableMatch()                (channel.MRLE = 0)

                                        /*---------------------------------------------------------------------+
                                        |                        Matches in Threads                            |
                                        +---------------------------------------------------------------------*/
00B8                                    #define DisableMatchesInThread()    match_disable()
00B9                                    #define EnableMatchesInThread()     match_enable()

                                        /*---------------------------------------------------------------------+
                                        |                     Enabling/Disabling Event Handling                |
                                        +---------------------------------------------------------------------*/
00BA                                    #define EnableEventHandling()                   (channel.MTD = 0)
00BB                                    #define EnableMatchAndTransitionEventHandling()  channel.MTD = 0

00BC                                    #define DisableEventHandling()                  (channel.MTD = 1)
00BD                                    #define DisableMatchAndTransitionEventHandling() channel.MTD = 1

                                        /*---------------------------------------------------------------------+
                                        |                     Enabling/Disabling Output Buffer                 |
                                        +---------------------------------------------------------------------*/
00BE                                    #define EnableOutputBuffer()           (channel.TBSA = enable_output_buffer)
00BF                                    #define DisableOutputBuffer()          (channel.TBSA = disable_output_buffer)

                                        /*----------------------------------------------------------------------+
                                        |                     Semaphore operations                              |
                                        +----------------------------------------------------------------------*/
00C0                                    #define IsSemaphoreLocked()   (channel.SMPR == 1)
00C1                                    #define LockSemaphore(num)    (channel.SMPR = num)
00C2                                    #define FreeSemaphore()       (channel.SMPR = -1)


ETPU "C" COMPILER 1.0.154.990                                           PAGE 20


                                        /*---------------------------------------------------------------------+
                                        |                             Exceptions                               |
                                        +---------------------------------------------------------------------*/
                                        /* Channel control macros */
00C3                                    #define SetChannelInterrupt()       (channel.CIRC = 0)
00C4                                    #define SetChannelInterruptRequest()(channel.CIRC = 0)

00C5                                    #define SetDataTransferInterrupt()        (channel.CIRC = 1)
00C6                                    #define SetDataTransferInterruptRequest() (channel.CIRC = 1)

00C7                                    #define SetGlobalException()  (channel.CIRC = 2)

                                        /*---------------------------------------------------------------------+
                                        |                         Channel control                              |
                                        +---------------------------------------------------------------------*/
00C8                                    #define LinkToChannel(ChNum)        (link = ChNum)  /*Generate the linker request to channel[ChNum] */
00C9                                    #define LinkTo(num)                 link = num;
00CA                                    #define LinkToEngine1Chan(num)      link = (num | (1<<6))
00CB                                    #define LinkToEngine2Chan(num)      link = (num | (2<<6))
00CC                                    #define LinkToOtherEngineChan(num)  link = (num | (3<<6))

00CD                                    #define SwitchToChannel(ChNum)      (chan = ChNum)  /*switch to specified channel from current channel*/
00CE                                    #define GetCurrentChanNum()          (chan)          /*return current channel number*/

                                        /* Read capture register  */
00CF                                    #define GetCapRegA()          (erta)
00D0                                    #define GetCapRegB()          (ertb)

                                        /*----------------------------------------------------------------------+
                                        |                          Complex Macros                               |
                                        +----------------------------------------------------------------------*/
                                        /*These macros should provide to most optimized way on doing things.
                                          They should be in the best order for optimizing.
                                          The compiler might be able to identify this code for optimization. */

                                        #define SetupMatchA(reference) \
                                            erta = reference; \
                                            EnableMatchA(); \
00D1                                        ClearMatchALatch();

                                        #define SetupMatchB(reference) \
                                            ertb = reference; \
                                            EnableMatchB(); \
00D2                                        ClearMatchBLatch();

                                        /*These are ONLY useful for init. and if you know which TCR you want to use.
                                          Latches are cleared at the end so it can be combined with other latches.*/
                                        #define ConfigMatch_AB() \
                                            WriteErtAToMatchAAndEnable(); \
                                            WriteErtBToMatchBAndEnable(); \
                                            EnableMatchA(); \
                                            EnableMatchB(); \
                                            EnableEventHandling();\
                                            ClearMatchALatch();\
00D3                                        ClearMatchBLatch();

ETPU "C" COMPILER 1.0.154.990                                           PAGE 21



                                        #define SetupMatch_A(reference, timebase_comparator, pin_action) \
                                            erta = reference; \
                                            act_unitA = timebase_comparator; \
                                            opacA = pin_action; \
                                            EnableMatchA(); \
                                            ClearMatchALatch();\
00D4                                        EnableEventHandling();

                                        #define SetupMatch_B(reference, timebase_comparator, pin_action) \
                                            ertb = reference; \
                                            act_unitB = timebase_comparator; \
                                            opacB = pin_action; \
                                            EnableMatchB(); \
                                            ClearMatchBLatch();\
00D5                                        EnableEventHandling();

                                        #define SetupCaptureTrans_A(timebase, pin_trans) \
                                            act_unitA = timebase;\
                                            ipacA = pin_trans;\
                                            ClearTransLatch();\
00D6                                        EnableEventHandling();

                                        #define SetupCaptureTrans_B(timebase, pin_trans) \
                                            act_unitB = timebase;\
                                            ipacB = pin_trans;\
                                            ClearTransLatch();\
00D7                                        EnableEventHandling();

                                        #endif /* _ETPUC_COMMON__H_ */

                                        /*********************************************************************
                                         *
                                         * Copyright:
                                         *  Freescale Semiconductor, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale
                                         *  Semiconductor, Inc. This software is provided on an "AS IS"
                                         *  basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, Freescale
                                         *  Semiconductor DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
                                         *  INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
                                         *  PARTICULAR PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH
                                         *  REGARD TO THE SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
                                         *  AND ANY ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT
                                         *  SHALL Freescale Semiconductor BE LIABLE FOR ANY DAMAGES WHATSOEVER
                                         *  (INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
                                         *  BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER

ETPU "C" COMPILER 1.0.154.990                                           PAGE 22


                                         *  PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale Semiconductor assumes no responsibility for the
                                         *  maintenance and support of this software
                                         *
                                         ********************************************************************/


0001                                    #pragma ETPU_function PWM, alternate @ PWM_FUNCTION_NUMBER;

                                        /* Macros to make the code easier to understand. */
                                        /* These are specific to this PWM function */
                                        /* Host service requests */
00000007                                #define PWM_INIT            7
00000003                                #define PWM_IMMED_UPDATE    3
00000005                                #define PWM_COHERENT_UPDATE 5

                                        /*Function Modes */
00000000                                #define PWM_USE_TCR1    0
00000001                                #define PWM_ACTIVE_HIGH 1
00000000                                #define PWM_ACTIVE_LOW  0

                                        /****************************************************************************
                                        * General Notes:
                                        * 1. This function works with high and low active times so the edges are
                                        *       called FrameEdge which determines the frequency and ActiveEdge
                                        *       which determines the active time of the signal.
                                        *
                                        * Channel Flag usage
                                        * Flag1 is a mirror of FunctionMode0 and defines if the PWM is active high
                                        *    or active low. It is used an entry condition. Flag1=1 for normal high
                                        *    active PWM.
                                        * Flag0 is used to define which edge should occur next. The problem is that
                                        *    for very small high or low pulses both matches can get set and they
                                        *    need to be serviced in a particular order.
                                        *    0 = Match2 next and 1 = Match1 next.
                                        ****************************************************************************/

                                        /*--------------------------------------------------------------------------+
                                        | FUNCTION PARAMETERS:                                                      |
                                        | Period: Determines the period of the output signal. It is the number of   |
                                        |     selected TCR tick. The maximum valid value is 0x80 0000 and the       |
                                        |     minimum useful value will depend on eTPU loading.                     |
                                        | ActiveTime: Determines the active time of the output signal. It is the    |
                                        |     number of TCR ticks. The maximum valid value is equal to the Period   |
                                        |     and the minimum value is 0.                                           |
                                        | Coherent_Period: Period value used for coherent update of period and      |
                                        |     active time.                                                          |
                                        | Coherent_ActiveTime: Period value used for coherent update of period and  |
                                        |     active time.                                                          |
                                        +--------------------------------------------------------------------------*/
                                        void PWM(int8 PWM_flag, int24 Period, int24 ActiveTime, int24 Coherent_Period, \
                                                int24 Coherent_ActiveTime )
0000 0001 0005 0009 000D                {
0011                                        static int24 LastFrame;

ETPU "C" COMPILER 1.0.154.990                                           PAGE 23


0015                                        static int24 NextEdge;

                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Initialize (S0)                                              |
                                        | DESCRIPTION: Initialize a channel to run the PWM function.                |
                                        |              1. Disable matches in thread in case there are any previous  |
                                        |                  pending matches. This could happen if the channel was    |
                                        |                  running another function before this one.                |
                                        |              2. Configure channel for active high or low signal.          |
                                        |              3. Configure channel to use TCR1 or TCR2.                    |
                                        |              4. Configure first match and channel mode.                   |
                                        |              5. Clear latches.                                            |
                                        |              6. Set flag0 to do match1 next. This will happen immediately |
                                        |                  because it has been scheduled for the current TCR count. |
                                        +--------------------------------------------------------------------------*/
                                            if ( HostServiceRequest == PWM_INIT )
                                            {
                                                DisableMatchesInThread();
                                                OnTransA( NoDetect );
                                                OnTransB( NoDetect );
                                                Clear ( TransLatch );
                                                Clear ( LSRLatch );
                                                EitherMatchNonBlockingSingleTransition();
0418 580FF7E5   chan ipaca = no_detect,
                    ipacb = no_detect,
                    em_nb_st,clr_lsr,
                    clr_tdl.
041C                                            Set (flag0);            /*after init frame edge should be serviced 1st*/
041C CFE9F980   ram p31_24 = PRAM0;             PWM_flag = PWM_flag | 1;
                    Set flag0.
0420 0802ABA2   alu p31_24 = p31_24 | 
                    #0x000001,ccs.
0424 CFFFF980   ram PRAM0 = p31_24.

                                                ActionUnitA( MatchTCR2, CaptureTCR2, GreaterEqual);
                                                ActionUnitB( MatchTCR2, CaptureTCR2, GreaterEqual);
0428 4FF33FFF   
                    chan tbsa = mtcr2_ctcr2_ge
                    ,
                    tbsb = mtcr2_ctcr2_ge
                    .
042C                                            erta = tcr2 + 1;
042C F3A821FF   if fm1==1 jump 043C,            if ( FunctionMode1 == PWM_USE_TCR1 )
                    noflush.            
0430 39FD2FF4   alu erta = tcr2 + 1 ,ccs
                    .                   
0434                                            {
                                                        ActionUnitA( MatchTCR1, CaptureTCR1, GreaterEqual);
                                                        ActionUnitB( MatchTCR1, CaptureTCR1, GreaterEqual);
0434 4FF00FFF   
                    chan tbsa = mtcr1_ctcr1_ge
                    ,
                    tbsb = mtcr1_ctcr1_ge
                    .
0438                                                    erta = tcr1 + 1;

ETPU "C" COMPILER 1.0.154.990                                           PAGE 24


                                                }
0438 39FC2FF4   alu erta = tcr1 + 1 ,ccs
                    .
043C BFEFFB81   ram p23_0 = PRAM5.              ertb = erta + ActiveTime;
0440 3B1E3FF4   alu ertb = erta + p ,ccs
                    .
0444 BFF37A85   alu p = ertb ,ccs;              NextEdge = ertb;
                    ram PRAM21 = p23_0.
0448 7FFFFF5F   chan write_erta,                ConfigMatch_AB();
                    write_ertb.
044C F3E0231F   if fm0==0 jump 0460,    
                    noflush.            
0450 FF3F0CFB   chan write_erta,                if ( FunctionMode0 == PWM_ACTIVE_HIGH )
                    write_ertb,clr_mrla,
                    clr_mrlb,           
                    mtd = enable_mtsr.  
0454                                            {
                                                    SetPinLow(); /*Active high so set pin low to start.*/
                                                    EnableOutputBuffer();
                                                    OnMatchB( PinLow );
0454 4F58FDFE   chan pin = low,
                    opacb = low,
                    tbsa = obe_on.
0458                                                Set( flag1 );
0458 F7E026BF   jump 04D4,noflush.                  goto PWM_Frame;
045C FFFBFCF9   Set flag1.
                                                }
                                                else
                                                {
                                                    SetPinHigh(); /*Active low so set pin low to start.*/
                                                    EnableOutputBuffer();
0460 4FF8FBFE   chan pin = high,
                    tbsa = obe_on.
0464                                                Clear( flag1 );
0464 FFFAFCF9   Clear flag1.
0468                                                OnMatchB( PinHigh );
0468 F7E0287F   jump 050C,noflush.                  goto PWM_Frame2;
046C 4F3FFFFF   chan opacb = high.
                                                }
                                               }
004A 01 06        01 A05 P01 MD 0418  HSR 6/7   lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Immediate Update (S1)                                        |
                                        | DESCRIPTION: This is used to change the active time of a channel during   |
                                        |                 the current period. The NextEdge time is calculated and   |
                                        |                 then scheduled.                                           |
                                        |              1. Check if ActiveEdge match has occured, if so just end.    |
                                        |              2. Reschedule the ActiveEdge.                                |
                                        +--------------------------------------------------------------------------*/
                                            else if ( HostServiceRequest == PWM_IMMED_UPDATE  && flag0==0)
                                            {
0470 BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + ActiveTime;
0474 BFE80A81   alu a = p ,ccs;

ETPU "C" COMPILER 1.0.154.990                                           PAGE 25


                    ram p23_0 = PRAM5.
0478 BF197A85   alu p = a + p ,ccs;
                    ram PRAM21 = p23_0.
047C BFE80A80   alu a = p ,ccs;                 ertb = NextEdge - Period;
                    ram p23_0 = PRAM1.
                                                WriteErtBToMatchBAndEnable();
0480 6C193FDB   alu ertb = a - p ,ccs;      }
                    chan write_ertb,end.
                    
0040 41 1C        01 A00 P01 ME 0470  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 0
0044 41 1C        01 A02 P01 ME 0470  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 0
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Immediate Update Missed (S2)                                 |
                                        | DESCRIPTION: The immediate update can not be done because the active edge |
                                        |                 has already occured so just reschedule edge in next frame.|
                                        +--------------------------------------------------------------------------*/
                                            else if ( HostServiceRequest == PWM_IMMED_UPDATE  && flag0==1)
                                            {
0484 BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + ActiveTime;
0488 BFE80A81   alu a = p ,ccs;
                    ram p23_0 = PRAM5.
048C BF197A85   alu p = a + p ,ccs;
                    ram PRAM21 = p23_0.
0490                                            ertb = NextEdge;
                                                WriteErtBToMatchBAndEnable();
0490 6FF83FDB   alu ertb = p ,ccs;          }
                    chan write_ertb,end.
                    
0042 41 21        01 A01 P01 ME 0484  HSR 2/3   lsr x  m1 x  m2 x  pin 0  flag1 x  flag0 1
0046 41 21        01 A03 P01 ME 0484  HSR 2/3   lsr x  m1 x  m2 x  pin 1  flag1 x  flag0 1
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Coherent Update (S3)                                         |
                                        | DESCRIPTION: Copy coherent update values into normal period and Active.   |
                                        |                This will always be coherent on the eTPU side because      |
                                        |                threads run to completion so this can not be interrupted.  |
                                        |                This will be coherent on the CPU side as long as the CPU   |
                                        |                writes the values, issues the host service request and then|
                                        |                wait until the service is finished.                        |
                                        +--------------------------------------------------------------------------*/
                                            else if (HostServiceRequest == PWM_COHERENT_UPDATE )
                                            {
0494 BFEFFB84   ram p23_0 = PRAM17.             NextEdge = LastFrame + Coherent_ActiveTime;
0498 BFE80A83   alu a = p ,ccs;
                    ram p23_0 = PRAM13.
049C BF197A85   alu p = a + p ,ccs;
                    ram PRAM21 = p23_0.
04A0 CFEFF980   ram p31_24 = PRAM0.             if ((PWM_flag & 0x1) == 1){
04A4 F500259F   if p_24==0 jump 04B0,   
                    flush.
04A8 BFEFFB85   ram p23_0 = PRAM21.                 ertb = NextEdge;
                                                    WriteErtBToMatchBAndEnable();

ETPU "C" COMPILER 1.0.154.990                                           PAGE 26


                                                }
04AC 7FF83FDB   alu ertb = p ,ccs;
                    chan write_ertb.
04B0 BFEFFB82   ram p23_0 = PRAM9.              Period = Coherent_Period;
04B4 BFFFFB80   ram PRAM1 = p23_0.
04B8 BFEFFB83   ram p23_0 = PRAM13.             ActiveTime = Coherent_ActiveTime;
04BC AFFFFB81   ram PRAM5 = p23_0,end.      }
0048 41 25        01 A04 P01 ME 0494  HSR 1/4/5 lsr x  m1 x  m2 x  pin x  flag1 x  flag0 x
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Frame Edge Active high (S4)                                  |
                                        | DESCRIPTION: All calculations are done on the frame edge to make sure     |
                                        |                everything is coherent.                                    |
                                        |              1. If 0% is requested stop the action on the match.          |
                                        |              2. Calculate next period and active edge.                    |
                                        |              3. Schedule the period edge.                                 |
                                        |              4. Store the active edge.                                    |
                                        |              5. Clear flag 0 to show next match should be match2.         |
                                        |              6. Request interrupt.                                        |
                                        +--------------------------------------------------------------------------*/
                                            else if (( m1==1 && m2==0 && flag0==1 && flag1==1) ||\
                                                     ( m1==1 && m2==1 && flag0==1 && flag1==1) )
                                            {
                                                Clear( flag0);          /*Match2 is next.*/
04C0 CFE8F980   ram p31_24 = PRAM0;             PWM_flag = PWM_flag & 0xFE;
                    Clear flag0.
04C4 0BF2ABD2   alu p31_24 = p31_24 & 
                    #0xFFFFFE,ccs.
04C8 CFFFF980   ram PRAM0 = p31_24.
                                                SetChannelInterrupt() ;
04CC CFEF3A80   ram p23_0 = PRAM1;              erta = erta + Period;
                    chan cir.

04D0 3B1E2FF4   alu erta = erta + p ,ccs
                    .
04D4                                    PWM_Frame:
04D4 BFEFFB81   ram p23_0 = PRAM5.              if( ActiveTime ==0 ){
04D8 3BF8FFF4   alu nil = p ,ccs.
04DC F0C0275F   if z==0 jump 04E8,flush. 
                    
                                                    OnMatchA (PinLow);  /*opposite of normal for 0%*/
                                                }
04E0 F7E0277F   jump 04EC,noflush.              else{
04E4 4AFFFFFF   chan opaca = low.
                                                    OnMatchA (PinHigh); /*normal*/
04E8 49FFFFFF   chan opaca = high.
04EC                                            }
                                        PWM_Frame1:
04EC BFFE7A84   alu p = erta ,ccs;              LastFrame = erta;
                    ram PRAM17 = p23_0.
                                                WriteErtAToMatchAAndEnable();
                                                Clear( MatchALatch );
04F0 DFEF3A81   ram p23_0 = PRAM5;              NextEdge = erta + ActiveTime;
                    chan write_erta,

ETPU "C" COMPILER 1.0.154.990                                           PAGE 27


                    clr_mrla.

04F4 AF1E7A85   alu p = erta + p ,ccs;      }
                    ram PRAM21 = p23_0,
                    end.
0076 41 30        01 A1B P01 ME 04C0  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 1
007E 41 30        01 A1F P01 ME 04C0  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 1
0056 41 30        01 A0B P01 ME 04C0  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 1
005E 41 30        01 A0F P01 ME 04C0  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 1
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Frame Edge Active Low (S5)                                   |
                                        | DESCRIPTION: Do the 0% test and stop the action, then goto the full edge  |
                                        |                thread.                                                    |
                                        +--------------------------------------------------------------------------*/
                                            else if (( m1==1 && m2==0 && flag0==1 && flag1==0) ||\
                                                     ( m1==1 && m2==1 && flag0==1 && flag1==0) )
                                            {
                                                Clear( flag0);          /*Match2 is next.*/
04F8 CFE8F980   ram p31_24 = PRAM0;             PWM_flag = PWM_flag & 0xFE;
                    Clear flag0.
04FC 0BF2ABD2   alu p31_24 = p31_24 & 
                    #0xFFFFFE,ccs.
0500 CFFFF980   ram PRAM0 = p31_24.
                                                SetChannelInterrupt() ;
0504 CFEF3A80   ram p23_0 = PRAM1;              erta = erta + Period;
                    chan cir.

0508 3B1E2FF4   alu erta = erta + p ,ccs
                    .
050C                                    PWM_Frame2:
050C BFEFFB81   ram p23_0 = PRAM5.              if( ActiveTime ==0 ){
0510 3BF8FFF4   alu nil = p ,ccs.
0514 F0C0291F   if z==0 jump 0520,flush. 
                    
                                                    OnMatchA (PinHigh); /*opposite of normal for 0%*/
                                                }
0518 F7E0293F   jump 0524,noflush.              else{
051C 49FFFFFF   chan opaca = high.
                                                    OnMatchA (PinLow);  /*normal*/
0520 4AFFFFFF   chan opaca = low.
0524                                            }
0524 F7C0277F   jump 04EC,flush.                goto PWM_Frame1;
                                               }
0072 41 3E        01 A19 P01 ME 04F8  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 1
007A 41 3E        01 A1D P01 ME 04F8  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 1
0052 41 3E        01 A09 P01 ME 04F8  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 1
005A 41 3E        01 A0D P01 ME 04F8  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 1
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Active Edge (S6)                                             |
                                        | DESCRIPTION: 1. Schedule the next already calculated active edge.         |
                                        |              2. Set flag 0 to show that match 1 should be next.           |

ETPU "C" COMPILER 1.0.154.990                                           PAGE 28


                                        +--------------------------------------------------------------------------*/
                                            else if ((m1==0 && m2==1 && flag0==0) ||\
                                                     (m1==1 && m2==1 && flag0==0))
                                            {
0528 BFEFFB85   ram p23_0 = PRAM21.             ertb = NextEdge;
052C 3BF83FF4   alu ertb = p ,ccs.
0530                                            Set( flag0 );
0530 CFE9F980   ram p31_24 = PRAM0;             PWM_flag = PWM_flag | 1;
                    Set flag0.
0534 0802ABA2   alu p31_24 = p31_24 | 
                    #0x000001,ccs.
0538 CFFFF980   ram PRAM0 = p31_24.
                                                WriteErtBToMatchBAndEnable();
                                                Clear( MatchBLatch );
053C 6FFFFF9F   chan write_ertb,clr_mrlb    }
                    ,end.
0070 41 4A        01 A18 P01 ME 0528  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 0  flag0 0
0074 41 4A        01 A1A P01 ME 0528  HSR 0     lsr x  m1 1  m2 1  pin 0  flag1 1  flag0 0
0078 41 4A        01 A1C P01 ME 0528  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 0  flag0 0
007C 41 4A        01 A1E P01 ME 0528  HSR 0     lsr x  m1 1  m2 1  pin 1  flag1 1  flag0 0
0060 41 4A        01 A10 P01 ME 0528  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 0
0064 41 4A        01 A12 P01 ME 0528  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 0
0068 41 4A        01 A14 P01 ME 0528  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 0
006C 41 4A        01 A16 P01 ME 0528  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 0
 
0000             Thread Local RAM size
                                        /*--------------------------------------------------------------------------+
                                        | THREAD NAME: Error (S7)                                                   |
                                        | DESCRIPTION: Something has gone wrong. :-(                                |
                                        |                Call the Global error routine and end.                     |
                                        +--------------------------------------------------------------------------*/
                                            else
                                            {
0540 4FFFFFFF   nop.                            NOP();//Global_Error_Func();
0544 6FFFFFFF   end.                        }
004C C1 50        01 A06 P23 ME 0540  HSR 0     lsr 1  m1 0  m2 0  pin 0  flag1 x  flag0 x
004E C1 50        01 A07 P23 ME 0540  HSR 0     lsr 1  m1 0  m2 0  pin 1  flag1 x  flag0 x
0050 C1 50        01 A08 P23 ME 0540  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 0  flag0 0
0054 C1 50        01 A0A P23 ME 0540  HSR 0     lsr x  m1 1  m2 0  pin 0  flag1 1  flag0 0
0058 C1 50        01 A0C P23 ME 0540  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 0  flag0 0
005C C1 50        01 A0E P23 ME 0540  HSR 0     lsr x  m1 1  m2 0  pin 1  flag1 1  flag0 0
0062 C1 50        01 A11 P23 ME 0540  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 0  flag0 1
0066 C1 50        01 A13 P23 ME 0540  HSR 0     lsr x  m1 0  m2 1  pin 0  flag1 1  flag0 1
006A C1 50        01 A15 P23 ME 0540  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 0  flag0 1
006E C1 50        01 A17 P23 ME 0540  HSR 0     lsr x  m1 0  m2 1  pin 1  flag1 1  flag0 1
 
0000             Thread Local RAM size
0000             Local RAM requirements for eTPU Function PWM
                                        };

                                        /* Information exported to Host CPU program */

0548                                    #pragma write h, (::ETPUfilename (etpu_pwm_auto.h));
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (/****************************************************************/);

ETPU "C" COMPILER 1.0.154.990                                           PAGE 29


0548                                    #pragma write h, (/* WARNING this file is automatically generated DO NOT EDIT IT! */);
0548                                    #pragma write h, (/*                                                              */);
0548                                    #pragma write h, (/* This file provides an interface between eTPU code and CPU    */);
0548                                    #pragma write h, (/* code. All references to the PWM function should be made with */);
0548                                    #pragma write h, (/* information in this file. This allows only symbolic          */);
0548                                    #pragma write h, (/* information to be referenced which allows the eTPU code to be*/);
0548                                    #pragma write h, (/* optimized without effecting the CPU code.                    */);
0548                                    #pragma write h, (/****************************************************************/);
0548                                    #pragma write h, (#ifndef _ETPU_PWM_AUTO_H_ );
0548                                    #pragma write h, (#define _ETPU_PWM_AUTO_H_ );
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (/* Function Configuration Information */);
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_FUNCTION_NUMBER) PWM_FUNCTION_NUMBER );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_TABLE_SELECT) ::ETPUentrytype(PWM) );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_NUM_PARMS) ::ETPUram(PWM) );
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (/* Host Service Request Definitions */);
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_INIT) PWM_INIT );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_IMM_UPDATE) PWM_IMMED_UPDATE );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_UPDATE) PWM_COHERENT_UPDATE );
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (/* Function Mode Bit Definitions - polarity options */);
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVEHIGH) PWM_ACTIVE_HIGH  );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVELOW) PWM_ACTIVE_LOW   );
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (/* Parameter Definitions */);
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_PERIOD_OFFSET) ::ETPUlocation (PWM, Period) );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_ACTIVE_OFFSET) ::ETPUlocation (PWM, ActiveTime) );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_PERIOD_OFFSET) ::ETPUlocation (PWM, Coherent_Period) );
0548                                    #pragma write h, (::ETPUliteral(#define FS_ETPU_PWM_CO_ACTIVE_OFFSET) ::ETPUlocation (PWM, Coherent_ActiveTime));
0548                                    #pragma write h, ( );
0548                                    #pragma write h, (#endif );
0548                                    #pragma write h, ( );

                                        /*********************************************************************
                                         *
                                         * Copyright:
                                         *  Freescale Semiconductor, INC. All Rights Reserved.
                                         *  You are hereby granted a copyright license to use, modify, and
                                         *  distribute the SOFTWARE so long as this entire notice is
                                         *  retained without alteration in any modified and/or redistributed
                                         *  versions, and that such modified versions are clearly identified
                                         *  as such. No licenses are granted by implication, estoppel or
                                         *  otherwise under any patents or trademarks of Freescale
                                         *  Semiconductor, Inc. This software is provided on an "AS IS"
                                         *  basis and without warranty.
                                         *
                                         *  To the maximum extent permitted by applicable law, Freescale
                                         *  Semiconductor DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
                                         *  INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
                                         *  PARTICULAR PURPOSE AND ANY WARRANTY AGAINST INFRINGEMENT WITH
                                         *  REGARD TO THE SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
                                         *  AND ANY ACCOMPANYING WRITTEN MATERIALS.
                                         *
                                         *  To the maximum extent permitted by applicable law, IN NO EVENT

ETPU "C" COMPILER 1.0.154.990                                           PAGE 30


                                         *  SHALL Freescale Semiconductor BE LIABLE FOR ANY DAMAGES WHATSOEVER
                                         *  (INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
                                         *  BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER
                                         *  PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE SOFTWARE.
                                         *
                                         *  Freescale Semiconductor assumes no responsibility for the
                                         *  maintenance and support of this software
                                         *
                                         ********************************************************************/





                                        // IC Input Capture function
00000002                                #define IC_FUNCTION_NUMBER 2
                                        //#include "etpuc_ic.c"

                                        // OC Output Compare function
00000003                                #define OC_FUNCTION_NUMBER 3
                                        //#include "etpuc_oc.c"

                                        // PFM (Period and Frequency Measurement) function
00000004                                #define PFM_FUNCTION_NUMBER 4
                                        //#include "etpuc_pfm.c"

                                        // PPA (Period / Period Accumulation) function
00000005                                #define PPA_FUNCTION_NUMBER 5
                                        //#include "etpuc_ppa.c"

                                        // UART (Universal Asynchronous Recieve / Transmitter) function
00000006                                #define UART_FUNCTION_NUMBER 6
                                        //#include "etpuc_uart.c"

                                        // QOM (Queued Output Match) function
00000007                                #define QOM_FUNCTION_NUMBER 7
                                        //#include "etpuc_qom.c"

                                        // SM (Stepper Motor) function
00000008                                #define SM_FUNCTION_NUMBER 8
                                        //#include "etpuc_sm.c"

                                        // SPI (Synchronous Peripheral Interface) function
00000009                                #define SPI_FUNCTION_NUMBER 9
                                        //#include "etpuc_spi.c"

                                        // POC (Protected Output Compare) function
0000000A                                #define POC_FUNCTION_NUMBER 0xA
                                        //#include "etpuc_poc.c"

                                        // Production test function
0000000B                                #define PRODUCTION_FUNCTION_NUMBER 0xB
                                        #include "production.c"
                                        #include "production.h"
                                        #ifndef PRODUCTION_H

ETPU "C" COMPILER 1.0.154.990                                           PAGE 31


                                        #define PRODUCTION_H

                                        /* Includes */
                                        #include "compilerDirectives.h"

                                        /* Defines */
                                        #define TRUE 1
                                        #define FALSE 0

                                        /* Function declaration */
                                        void productionDebugTestMain(void);
                                        void productionTraceTestMain(void);

                                        #endif //PRODUCTION_H

                                        /* Variables declaration */
0000                                    volatile unsigned char debugVariable = 0;
0004                                    volatile unsigned char debugLoopCount = 0;

0005                                    volatile unsigned char traceVariable = 0;
0006                                    volatile unsigned char traceLoopCount = 0;

0007                                    volatile unsigned char debugLoopCountLimit = 3;
0008                                    volatile unsigned char traceLoopCountLimit = 100;
                                        void productionDebugTestMain(void)
                                        {
0548 9FEFFB01   ram p23_0 = 0005.         debugLoopCount = debugLoopCountLimit;
054C 3BF0AFF4   alu p31_24 = p7_0 ,ccs.
0550 CFFFF101   ram 0004 = p31_24.
0554 3FFFAFF2   alu p31_24 = 0 .          debugVariable = 0;
0558 CFFFF100   ram 0000 = p31_24.

                                          while(debugLoopCount--)
055C CFEFF101   ram p31_24 = 0004.        {
0560 3BF20FF4   alu a = p31_24 ,ccs.        debugVariable++;
0564 CFEFF101   ram p31_24 = 0004.
0568 32F2AFF4   alu p31_24 = p31_24 -1 ,
                    ccs8.
056C CFFFF101   ram 0004 = p31_24.
0570 3BF9FFF4   alu nil = a ,ccs.
0574 F0C82C5F   if z==1 jump 0588,flush. 
                    
0578 CFEFF100   ram p31_24 = 0000.
057C 31F2AFF4   alu p31_24 = p31_24 + 1 
                    ,ccs8.
0580 CFFFF100   ram 0000 = p31_24.
0584 F7C02AFF   jump 055C,flush.          }
0588 FFDFCCF9   return,flush.           }

                                        void productionTraceTestMain(void)
                                        {
058C CFEFF102   ram p31_24 = 0008.        traceLoopCount = traceLoopCountLimit;
0590 9FEFFB01   ram p23_0 = 0005.
0594 9FF2CA01   alu p15_8 = p31_24 ,ccs;
                    ram 0005 = p23_0.

ETPU "C" COMPILER 1.0.154.990                                           PAGE 32


0598 9FEFFB01   ram p23_0 = 0005.         traceVariable = 0;

                                          while(traceLoopCount--)
059C 9FFFBB01   alu p23_16 = 0 ;        
                    ram 0005 = p23_0.   
05A0 9FEFFB01   ram p23_0 = 0005.         {
05A4 9FE10A01   alu a = p15_8 ,ccs;         traceVariable++;
                    ram p23_0 = 0005.
05A8 9EF1CA01   alu p15_8 = p15_8 -1 ,
                    ccs;ram 0005 = p23_0
                    .
05AC 3BF9FFF4   alu nil = a ,ccs.
05B0 F0C82E1F   if z==1 jump 05C0,flush. 
                    
05B4 9FEFFB01   ram p23_0 = 0005.
05B8 F7E02D1F   jump 05A0,noflush.        }
05BC 9DF7BA01   alu p23_16 = p23_16 + 1 
                    ,ccs;
                    ram 0005 = p23_0.
05C0 FFDFCCF9   return,flush.           }

                                        // test function
0000000F                                #define TEST_FUNCTION_NUMBER 15
                                        //#include "etpuc_test.c"

                                        void Global_Error_Func()
                                        {
0009                                        int24 error_temp;

05C4 F3002E9F   if lsr==0 jump 05D0,        if (LinkServiceRequest == 1) error_temp=1;
                    flush.
05C8 F7E02EBF   jump 05D4,noflush.          else
05CC 9DFF7B02   alu p = 1 ;
                    ram 0009 = p23_0.
05D0 9FFF7B02   alu p = 0 ;                     error_temp = 0;
                    ram 0009 = p23_0.

05D4 F2802F1F   if mrl1==0 jump 05E0,       if (MatchALatch == 1) error_temp++;
                    flush.
05D8 9FEFFB02   ram p23_0 = 0009.
05DC 9DF87A02   alu p = p + 1 ,ccs;
                    ram 0009 = p23_0.
05E0 9FEFFB02   ram p23_0 = 0009.           error_temp <<= 1;

05E4 F2E02FBF   if mrl2==0 jump 05F4,       if (MatchBLatch == 1) error_temp++;
                    noflush.
05E8 93F87A02   alu p = p  <<1 ,ccs;
                    ram 0009 = p23_0.
05EC 9FEFFB02   ram p23_0 = 0009.
05F0 9DF87A02   alu p = p + 1 ,ccs;
                    ram 0009 = p23_0.
05F4 9FEFFB02   ram p23_0 = 0009.           error_temp <<= 1;

05F8 F220305F   if tdl1==0 jump 0608,       if (TransitionALatch == 1) error_temp++;
                    noflush.

ETPU "C" COMPILER 1.0.154.990                                           PAGE 33


05FC 93F87A02   alu p = p  <<1 ,ccs;
                    ram 0009 = p23_0.
0600 9FEFFB02   ram p23_0 = 0009.
0604 9DF87A02   alu p = p + 1 ,ccs;
                    ram 0009 = p23_0.
0608 9FEFFB02   ram p23_0 = 0009.           error_temp <<= 1;

060C F26030FF   if tdl2==0 jump 061C,       if (TransitionBLatch == 1) error_temp++;
                    noflush.
0610 93F87A02   alu p = p  <<1 ,ccs;
                    ram 0009 = p23_0.
0614 9FEFFB02   ram p23_0 = 0009.
0618 9DF87A02   alu p = p + 1 ,ccs;
                    ram 0009 = p23_0.
061C 9FEFFB02   ram p23_0 = 0009.           error_temp <<= 8;
0620 18087BCA   alu p = p <<8,ccs.

0624 9FFFFB02   ram 0009 = p23_0.
0628 3B197FB4   alu p = chan + p ,ccs.      Global_Error = error_temp + chan;

062C 9FFFFB00   ram 0001 = p23_0.
0630                                        ClearAllLatches();

0630 FFFFCCF9   return,noflush.         }
0634 4FEFF6BF   chan clr_lsr,clr_mrla,
                    clr_mrlb,clr_tdl.

                                        void Global_Error_Func1()
                                        {
0638 FFDFCCF9   return,flush.           }

                                        int24 f(int24 i)
000D                                    {
063C 9FEFFB03   ram p23_0 = 000D.         if (0==i)
0640 3BF8FFF4   alu nil = p ,ccs.         {
0644 F0C0329F   if z==0 jump 0650,flush. 
                    
0648 FFFFCCF9   return,noflush.             return 0;
064C 3FFF0FF2   alu a = 0 .
                                          }
                                          else
                                          {
0650 FFFFCCF9   return,noflush.             return 0x1;
0654 3DFF0FF4   alu a = 1 .
                                          }
                                           }

                                        /* output eTPU code image and information for CPU */
0658                                    #pragma write h, (::ETPUfilename (etpuc_set1.h));
0658                                    #pragma write h, (/* Auto-generated file DO NOT EDIT */);
0658                                    #pragma write h, ( );
0658                                    #pragma write h, (/* eTPU standard function set1 */ );

0658                                    #pragma write h, (#define FS_ETPU_ENTRY_TABLE 0x0000);
0658                                    #pragma write h, ( );

ETPU "C" COMPILER 1.0.154.990                                           PAGE 34



0658                                    #pragma write h, (#define FS_ETPU_MISC ::ETPUmisc);
0658                                    #pragma write h, ( );

0658                                    #pragma write h, (const uint32_t etpu_globals[] = { ::ETPUglobalimage32 }; );
0658                                    #pragma write h, ();

0658                                    #pragma write h, (const uint32_t etpu_code[] = { ::ETPUcode32 }; );

0658                                    #pragma write h, (/* List of functions: );
0658                                    #pragma write h, (::ETPUnames);
0658                                    #pragma write h, (*/);

0658                                    #pragma write e, (eTPU_C Debugging Information);
0658                                    #pragma write e, (Environment Summary);

ETPU "C" COMPILER 1.0.154.990                                           PAGE 35




SYMBOL TABLE

LABEL                             VALUE LABEL                             VALUE 

AnyTrans                         0003 | Capture_tcr1                     0000 
Capture_tcr2                     0002 | FALSE                            0000 
F_CPU                            0010 | Global_Error                     0001 
Global_Error_Func                05C4 | Global_Error_Func1               0638 
H0_FUNCTION_NUMBER               0000 | HighLow                          0002 
IC_FUNCTION_NUMBER               0002 | LowHigh                          0001 
Mtcr1_Ctcr1_eq                   0004 | Mtcr1_Ctcr1_ge                   0000 
Mtcr1_Ctcr2_eq                   0006 | Mtcr1_Ctcr2_ge                   0002 
Mtcr2_Ctcr1_eq                   0005 | Mtcr2_Ctcr1_ge                   0001 
Mtcr2_Ctcr2_eq                   0007 | Mtcr2_Ctcr2_ge                   0003 
NoChange                         0000 | NoDetect                         0000 
OC_FUNCTION_NUMBER               0003 | PFM_FUNCTION_NUMBER              0004 
POC_FUNCTION_NUMBER              000A | PPA_FUNCTION_NUMBER              0005 
PRODUCTION_FUNCTION_NUMBER       000B | PROD_DEBUG_TEST_REQUEST          0005 
PROD_TRACE_TEST_REQUEST          0000 | PWM                              0418 
PWM_ACTIVE_HIGH                  0001 | PWM_ACTIVE_LOW                   0000 
PWM_COHERENT_UPDATE              0005 | PWM_FUNCTION_NUMBER              0001 
PWM_Frame                        04D4 | PWM_Frame1                       04EC 
PWM_Frame2                       050C | PWM_IMMED_UPDATE                 0003 
PWM_INIT                         0007 | PWM_USE_TCR1                     0000 
PerPacA                          0000 | PerPacB                          0001 
PinHigh                          0001 | PinLow                           0002 
PinToggle                        0003 | QOM_FUNCTION_NUMBER              0007 
SM_FUNCTION_NUMBER               0008 | SPI_FUNCTION_NUMBER              0009 
SetHigh                          0002 | SetLow                           0004 
TEST_FUNCTION_NUMBER             000F | TRUE                             0001 
UART_FUNCTION_NUMBER             0006 | any_trans                        0003 
b                                0000 | bm_dt                            0007 
bm_st                            0006 | c                                0000 
chan                             0000 | chan_base                        0000 
channel                          0000 | d                                0000 
debugLoopCount                   0004 | debugLoopCountLimit              0007 
debugVariable                    0000 | detect_input_0_on_match          0004 
detect_input_1_on_match          0005 | diob                             0000 
disable_output_buffer            0009 | do_nothing                       000F 
em_b_dt                          0001 | em_b_st                          0000 
em_nb_dt                         0003 | em_nb_st                         0002 
enable_output_buffer             0008 | erta                             0000 
ertb                             0000 | f                                063C 
handler0                         0400 | high_low                         0002 
link                             0000 | low_high                         0001 
m2_dt                            0005 | m2_o_dt                          0009 
m2_o_st                          0008 | m2_st                            0004 
mach                             0000 | macl                             0000 
match_high                       0001 | match_low                        0002 
match_no_change                  0000 | match_toggle                     0003 
no_change_ipac                   0007 | no_detect                        0000 
opac_high                        0001 | opac_high_low                    0004 
opac_low                         0002 | opac_low_high                    0005 
ETPU "C" COMPILER 1.0.154.990                                           PAGE 36




SYMBOL TABLE - Continued

LABEL                            VALUE  LABEL                            VALUE  


p                                0000 | pin_high                         0002 
pin_low                          0004 | pin_opacA                        0000 
pin_opacB                        0001 | productionDebugTestMain          0548 
productionTraceTestMain          058C | rar                              0000 
sm_dt                            000D | sm_st                            000C 
sm_st_e                          000E | sr                               0000 
tcr1                             0000 | tcr2                             0000 
toggle                           0003 | tpr                              0000 
tpr_struct                       0004 | traceLoopCount                   0006 
traceLoopCountLimit              0008 | traceVariable                    0005 
transition_high                  0005 | transition_low                   0004 
transition_toggle                0006 | trr                              0000 



RAM USAGE MAP 

0001 Global_Error                     signed int24        
0011 LastFrame                        signed int24        0418  0547
0015 NextEdge                         signed int24        0418  0547
0000 debugVariable                    unsigned char       
0004 debugLoopCount                   unsigned char       
0005 traceVariable                    unsigned char       
0006 traceLoopCount                   unsigned char       
0007 debugLoopCountLimit              unsigned char       
0008 traceLoopCountLimit              unsigned char       
0009 error_temp                       signed int24        05C4  062F


ROM USAGE MAP 

    0000 to 007F    0400 to 0657
    Total ROM used 02D8 (728)


eTPU FUNCTION SUMMARY 

  0                          handler0  0400  0418  (6 words)  SRAM =    0  Local RAM =    0
  1                               PWM  0418  0548  (76 words)  SRAM =   24  Local RAM =    0


Errors             :    0
Warnings           :    0

