/********** MPC5748G Memory map **********/
/* HSM data    : 0x00F80000 - 0x00F87FFF */
/* S HSM code  : 0x00F8C000 - 0x00F8FFFF */
/* S and M NVM : 0x00F90000 - 0x00FFFFFF */      
/* L NVM       : 0x01000000 - 0x0157FFFF */
/* System RAM  : 0x40000000 - 0x400BFFFF */
/*****************************************/

MEMORY
{
    resetvector:        org = 0x00F8C000,   len = 0x00000020
    init:               org = 0x00F8C020,   len = 0x00000FE0
    exception_handlers: org = 0x00F8CC00,   len = 0x00001000
    internal_flash:     org = 0x00F90000,   len = 0x00020000
    internal_ram:       org = 0x40000000,   len = 0x00002000  
    heap  :             org = 0x40002000,   len = 0x1000 /* Heap start location */
    stack :             org = 0x40003000,   len = 0x1000 /* Start location for Stack */
}

__RAM_START_ADDR = ADDR(internal_ram);
__RAM_END_ADDR = ADDR(stack) + SIZEOF(stack);
__RAM_SIZE = __RAM_END_ADDR - __RAM_START_ADDR;

 FORCEACTIVE { "RCHW" "CPU2_resetvector","CFG_bits0","CFG_bits1","CPU0_resetvector","CPU1_resetvector" }

		
SECTIONS
{
    .__bam_bootarea LOAD (0x00F8C000): {} > resetvector

    .init  LOAD (0x00F8C020): {} > init
    .init_vle (VLECODE) LOAD (ADDR(.init)+SIZEOF(.init)): {
        *(.init)
        *(.init_vle)
     } > init

    GROUP  : {
      .xcptn_core_0  (VLECODE) LOAD (0x00F8CC00) ALIGN (0x100): {}      
    } > exception_handlers 

    GROUP  : {
      .text : {} 
      .text_vle (VLECODE) ALIGN(0x08): {
         *(.text)
         *(.text_vle)
       }
       .rodata (CONST) : {
         *(.rdata)
         *(.rodata)
       }
       .ctors : {}
       .dtors : {}
       extab : {}
       extabindex : {}
    } > internal_flash
    
    GROUP : {
       .__uninitialized_intc_handlertable ALIGN(2048) : {}
       .data   : {}
       .sdata  : {}
       .sbss   : {}
       .sdata2 : {}
       .sbss2  : {}
       .bss    : {}
    } > internal_ram
}

/* Metrowerks CodeWarrior compiler address designations */

_stack_addr = ADDR(stack)+SIZEOF(stack);
_stack_end  = ADDR(stack);
__ROM_SDATA_SIZE    = SIZEOF(.sdata);
__ROM_SDATA_ADDR    = ROMADDR(.sdata);
__RAM_SDATA_ADDR    = ADDR(.sdata);

/* Exceptions Handlers Location (used in z650Exceptions.c for IVPR initialization) */

EXCEPTION_HANDLERS = ADDR(exception_handlers);

