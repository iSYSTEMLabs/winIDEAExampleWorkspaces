/*
 ******************************************************************************** 
 *
 * Detail Description     : 
 * Scott OBrien 4/29/10   : Leopard LSM File.
 *
 ******************************************************************************** 
 * NOTE:
 * 1) When generated a ROM Image - Which is a MUST if you have Initialzed Data
 * The ROM Image ROM Locattion needs to match the "int_flash" Section Address
 *
 * 2) We are NOT using any Small Data
 ******************************************************************************** 
*/

MEMORY
{
    resetvector:                    org=0x00000000, len=0x00000008
    init:                           org=0x00000020, len=0x00000FE0
    exception_handlers:             org=0x00001000, len=0x00001000
    vector_table:                   org=0x00002000, len=0x00001000
    int_flash:                      org=0x00003000, len=0x0000D000
    int_sram:                       org=0x40000000, len=0x00004000
    stack_ram:                      org=0x40004000, len=0x00000800
}

FORCEACTIVE { "bam_rchw" "bam_resetvector" }
		
SECTIONS
{
    .__bam_bootarea LOAD (0x00000000): {} > resetvector

    GROUP : {
      .init LOAD (0x00000020) : {}
      .init_vle (VLECODE) LOAD (_e_init) : {
        *(.init)
        *(.init_vle)
      }
    } > init

    GROUP : 
    { 
      .exec_vect  LOAD (0x1000): {}
      .exec_vect_Vle (VLECODE) LOAD (_e_exec_vect): {}
    } > exception_handlers

    GROUP : 
    { 
      .ivor4_vector_table LOAD(0x2000): {}
    } > vector_table

    GROUP : 
    { 
      __argv=.;
      __env=.;

      .text : {}
      .text_vle (VLECODE): 
      { 
        *(.text_vle)
        *(.text)
      }
      .rodata (CONST): 
      { 
        *(.rdata)
        *(.rodata)
      }
      .ctors  ALIGN (0x4): { *(.ctors) }
      .dtors  ALIGN (0x4): { *(.dtors) }
      .sdata2 : {}
      .sbss2 : {} 
    } > int_flash

    GROUP : 
    { 
      __DATA_ROM_ADDR = ADDR(.sbss2) + SIZEOF(.sbss2);
      __DATA_SRAM_ADDR =.;

      .data : { *(.data) }
      .j_pdata : { *(.j_pdata) }
      .sdata : { *(.sdata) }
      
      __DATA_END=.;
      __BSS_START=.;

      .sbss : { *(.sbss) }
      .bss : { *(.bss) }
      .tibss : {}
        
      __BSS_END=.;

      .tidata : {}
      
      __HEAP_START =.;
    } > int_sram
}

/* Variable required for Startup, Interrupts, etc */

__DATA_SIZE       = __DATA_END - __DATA_SRAM_ADDR;
__SP_INIT         = ADDR(stack_ram) + SIZEOF(stack_ram);
__SP_END          = ADDR(stack_ram);
_SRAM_BASE_ADDR   = ADDR(int_sram);
_SRAM_SIZE        = SIZEOF(int_sram) + SIZEOF(stack_ram);
__SDATA_SIZE      = SIZEOF(.sdata);
__SDATA_ROM_ADDR  = ROMADDR(.sdata);
__SDATA_SRAM_ADDR = ADDR(.sdata);

__IVPR_VALUE = ADDR(exception_handlers);


