INPUT(&&)
OUTPUT_ARCH( "riscv" )
ENTRY(Reset_Handler)

/* Specify the memory areas */
MEMORY
{
  RAM (RWXA)  : ORIGIN = 0xA040000, LENGTH = 0x00010000
}

STACK_SIZE = 0x400;

/* Define output sections */
SECTIONS
{
  .irq_handler : ALIGN(4)
  {
    __VECTOR_TABLE = .;
    KEEP(*(.irq_handler))
    . = ALIGN(4);
  } > RAM

  .text :
  {
    . = ALIGN(4);
    KEEP(*(.startup))
    . = ALIGN(4);
    __user_vector = .;
    KEEP(*(user_vectors))
    *(.text)                 /* .text sections (code) */
    *(.text*)                /* .text* sections (code) */
    *(.rodata)               /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)              /* .rodata* sections (constants, strings, etc.) */
    *(.srodata .srodata.*)
    *(.init)
    *(.fini)
  } > RAM
  
  .data :
  {
    . = ALIGN(4);
    __DATA_RAM = .;
    __data_start__ = .;      /* create a global symbol at data start */
    *(.data)                 /* .data sections */
    *(.data*)                /* .data* sections */
    *(.sdata .sdata.*)
    __noncachedata_start__ = .;   /* create a global symbol at ncache data start */
	*(NonCacheable)
    __noncachedata_end__ = .;     /* define a global symbol at ncache data end */
    KEEP(*(.jcr*))
    . = ALIGN(4);
    __data_end__ = .;        /* define a global symbol at data end */
  } > RAM

  PROVIDE (__DATA_START = __DATA_RAM);
/*  __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);    */
/*  text_end = ORIGIN(m_text) + LENGTH(m_text);   */

  _edata = .;
  /* Uninitialized data section */
  
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss section */
    . = ALIGN(4);
    __START_BSS = .;
    __bss_start__ = .;
    *(.bss)
    *(.bss*)
    *(.sbss)
    *(.sbss*)
    *(COMMON)
    . = ALIGN(4);
    __bss_end__ = .;
    __END_BSS = .;
  } > RAM

  /* End of uninitalized data segement */
  _end = .;
  PROVIDE(end = .);

  .stack :
  {
    . = ALIGN(8);
    __StackLimit = .;
    . += STACK_SIZE;
    __StackTop = .;
  } > RAM

  /* Initializes stack on the end of block */
  PROVIDE(__stack = __StackTop);
}

